// -------------------------------------------------------------
// 
// File Name: C:\Users\Hassa\Documents\GitHub\vocoder\MATLAB\MATLAB_CodeGen\codegen\envelopeModulation\hdlsrc\SDFCommutator5.sv
// Created: 2024-03-28 20:55:43
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// -------------------------------------------------------------


import envelopeModulation_fixpt_pkg::* ;

// -------------------------------------------------------------
// 
// Module: SDFCommutator5
// Source Path: envelopeModulation_fixpt/dsphdl.IFFT/RADIX22FFT_SDF1_5/SDFCommutator5
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SDFCommutator5
          (  input logic clk,
             input logic reset,
             input logic enb,
             input logic din_5_vld_dly,
             input logic signed [25:0] xf_re  /* sfix26 */,
             input logic signed [25:0] xf_im  /* sfix26 */,
             input logic xf_vld,
             input logic signed [25:0] dinXTwdlf_re  /* sfix26 */,
             input logic signed [25:0] dinXTwdlf_im  /* sfix26 */,
             input logic dinxTwdlf_vld,
             input logic signed [25:0] btf1_re  /* sfix26 */,
             input logic signed [25:0] btf1_im  /* sfix26 */,
             input logic signed [25:0] btf2_re  /* sfix26 */,
             input logic signed [25:0] btf2_im  /* sfix26 */,
             input logic btf_vld,
             input logic softReset,
             output logic signed [25:0] wrData_re  /* sfix26 */,
             output logic signed [25:0] wrData_im  /* sfix26 */,
             output logic [4:0] wrAddr  /* ufix5 */,
             output logic wrEnb,
             output logic signed [25:0] dout_5_1_re  /* sfix26 */,
             output logic signed [25:0] dout_5_1_im  /* sfix26 */,
             output logic dout_5_1_vld);


  logic signed [25:0] SDFCummutator_out_re;  /* sfix26 */
  logic signed [25:0] SDFCummutator_out_im;  /* sfix26 */
  logic SDFCummutator_out_vld;
  logic [4:0] SDFCummutator_wrAddr_reg;  /* ufix5 */
  logic [2:0] SDFCummutator_wrState;  /* ufix3 */
  logic [1:0] SDFCummutator_mem_btf_switch;  /* ufix2 */
  logic [4:0] SDFCummutator_rdCnt;  /* ufix5 */
  logic signed [25:0] SDFCummutator_wrData_re_reg;  /* sfix26 */
  logic signed [25:0] SDFCummutator_wrData_im_reg;  /* sfix26 */
  logic SDFCummutator_wrEnb_reg;
  logic signed [25:0] SDFCummutator_wrXData_re_reg;  /* sfix26 */
  logic signed [25:0] SDFCummutator_wrXData_im_reg;  /* sfix26 */
  logic [2:0] SDFCummutator_xWrAddr;  /* ufix3 */
  logic SDFCummutator_wrxEnb_reg;
  logic [2:0] SDFCummutator_xRdAddr;  /* ufix3 */
  logic [2:0] SDFCummutator_XState;  /* ufix3 */
  logic SDFCummutator_rdEnb_xmem;
  logic SDFCummutator_wrEnb_xmem;
  logic SDFCummutator_xX_vld_reg;
  logic signed [25:0] SDFCummutator_out_re_next;  /* sfix26 */
  logic signed [25:0] SDFCummutator_out_im_next;  /* sfix26 */
  logic SDFCummutator_out_vld_next;
  logic [4:0] SDFCummutator_wrAddr_reg_next;  /* ufix5 */
  logic [2:0] SDFCummutator_wrState_next;  /* ufix3 */
  logic [1:0] SDFCummutator_mem_btf_switch_next;  /* ufix2 */
  logic [4:0] SDFCummutator_rdCnt_next;  /* ufix5 */
  logic signed [25:0] SDFCummutator_wrData_re_reg_next;  /* sfix26 */
  logic signed [25:0] SDFCummutator_wrData_im_reg_next;  /* sfix26 */
  logic SDFCummutator_wrEnb_reg_next;
  logic signed [25:0] SDFCummutator_wrXData_re_reg_next;  /* sfix26 */
  logic signed [25:0] SDFCummutator_wrXData_im_reg_next;  /* sfix26 */
  logic [2:0] SDFCummutator_xWrAddr_next;  /* ufix3 */
  logic SDFCummutator_wrxEnb_reg_next;
  logic [2:0] SDFCummutator_xRdAddr_next;  /* ufix3 */
  logic [2:0] SDFCummutator_XState_next;  /* ufix3 */
  logic SDFCummutator_rdEnb_xmem_next;
  logic SDFCummutator_wrEnb_xmem_next;
  logic SDFCummutator_xX_vld_reg_next;
  logic signed [25:0] wrData_re_1;  /* sfix26 */
  logic signed [25:0] wrData_im_1;  /* sfix26 */
  logic [4:0] wrAddr_1;  /* ufix5 */
  logic wrEnb_1;
  logic signed [25:0] xData_re;  /* sfix26 */
  logic signed [25:0] xData_im;  /* sfix26 */
  logic [2:0] wrXAddr;  /* ufix3 */
  logic wrXEnb;
  logic [2:0] rdXAddr;  /* ufix3 */
  logic xX_vld;
  logic signed [25:0] dout0_re;  /* sfix26 */
  logic signed [25:0] dout0_im;  /* sfix26 */
  logic dout0_vld;
  logic signed [25:0] xX_re;  /* sfix26 */
  logic signed [25:0] xX_im;  /* sfix26 */
  logic signed [25:0] SDFOutmux_btf2Pipe_re;  /* sfix26 */
  logic signed [25:0] SDFOutmux_btf2Pipe_im;  /* sfix26 */
  logic SDFOutmux_btfPipe_vld;
  logic signed [25:0] SDFOutmux_btf2Pipe_re_next;  /* sfix26 */
  logic signed [25:0] SDFOutmux_btf2Pipe_im_next;  /* sfix26 */
  logic SDFOutmux_btfPipe_vld_next;
  logic signed [25:0] dout_5_1_re_1;  /* sfix26 */
  logic signed [25:0] dout_5_1_im_1;  /* sfix26 */
  logic dout_5_1_vld_1;


  // SDFCummutator
  always_ff @(posedge clk or posedge reset)
    begin : SDFCummutator_process
      if (reset == 1'b1) begin
        SDFCummutator_out_re <= 26'sb00000000000000000000000000;
        SDFCummutator_out_im <= 26'sb00000000000000000000000000;
        SDFCummutator_wrData_re_reg <= 26'sb00000000000000000000000000;
        SDFCummutator_wrData_im_reg <= 26'sb00000000000000000000000000;
        SDFCummutator_wrEnb_reg <= 1'b0;
        SDFCummutator_out_vld <= 1'b0;
        SDFCummutator_wrState <= 3'b000;
        SDFCummutator_mem_btf_switch <= 2'b00;
        SDFCummutator_wrAddr_reg <= 5'b00000;
        SDFCummutator_rdCnt <= 5'b00000;
        SDFCummutator_wrXData_re_reg <= 26'sb00000000000000000000000000;
        SDFCummutator_wrXData_im_reg <= 26'sb00000000000000000000000000;
        SDFCummutator_xWrAddr <= 3'b000;
        SDFCummutator_wrxEnb_reg <= 1'b0;
        SDFCummutator_xRdAddr <= 3'b000;
        SDFCummutator_XState <= 3'b000;
        SDFCummutator_rdEnb_xmem <= 1'b0;
        SDFCummutator_wrEnb_xmem <= 1'b0;
        SDFCummutator_xX_vld_reg <= 1'b0;
      end
      else begin
        if (enb) begin
          SDFCummutator_out_re <= SDFCummutator_out_re_next;
          SDFCummutator_out_im <= SDFCummutator_out_im_next;
          SDFCummutator_out_vld <= SDFCummutator_out_vld_next;
          SDFCummutator_wrAddr_reg <= SDFCummutator_wrAddr_reg_next;
          SDFCummutator_wrState <= SDFCummutator_wrState_next;
          SDFCummutator_mem_btf_switch <= SDFCummutator_mem_btf_switch_next;
          SDFCummutator_rdCnt <= SDFCummutator_rdCnt_next;
          SDFCummutator_wrData_re_reg <= SDFCummutator_wrData_re_reg_next;
          SDFCummutator_wrData_im_reg <= SDFCummutator_wrData_im_reg_next;
          SDFCummutator_wrEnb_reg <= SDFCummutator_wrEnb_reg_next;
          SDFCummutator_wrXData_re_reg <= SDFCummutator_wrXData_re_reg_next;
          SDFCummutator_wrXData_im_reg <= SDFCummutator_wrXData_im_reg_next;
          SDFCummutator_xWrAddr <= SDFCummutator_xWrAddr_next;
          SDFCummutator_wrxEnb_reg <= SDFCummutator_wrxEnb_reg_next;
          SDFCummutator_xRdAddr <= SDFCummutator_xRdAddr_next;
          SDFCummutator_XState <= SDFCummutator_XState_next;
          SDFCummutator_rdEnb_xmem <= SDFCummutator_rdEnb_xmem_next;
          SDFCummutator_wrEnb_xmem <= SDFCummutator_wrEnb_xmem_next;
          SDFCummutator_xX_vld_reg <= SDFCummutator_xX_vld_reg_next;
        end
      end
    end

  always @(SDFCummutator_XState, SDFCummutator_mem_btf_switch, SDFCummutator_out_im,
       SDFCummutator_out_re, SDFCummutator_out_vld, SDFCummutator_rdCnt,
       SDFCummutator_rdEnb_xmem, SDFCummutator_wrAddr_reg,
       SDFCummutator_wrData_im_reg, SDFCummutator_wrData_re_reg,
       SDFCummutator_wrEnb_reg, SDFCummutator_wrEnb_xmem, SDFCummutator_wrState,
       SDFCummutator_wrXData_im_reg, SDFCummutator_wrXData_re_reg,
       SDFCummutator_wrxEnb_reg, SDFCummutator_xRdAddr, SDFCummutator_xWrAddr,
       SDFCummutator_xX_vld_reg, btf1_im, btf1_re, btf2_im, btf2_re, btf_vld,
       dinXTwdlf_im, dinXTwdlf_re, dinxTwdlf_vld, xf_im, xf_re, xf_vld) begin
    SDFCummutator_wrAddr_reg_next = SDFCummutator_wrAddr_reg;
    SDFCummutator_rdCnt_next = SDFCummutator_rdCnt;
    SDFCummutator_wrData_re_reg_next = SDFCummutator_wrData_re_reg;
    SDFCummutator_wrData_im_reg_next = SDFCummutator_wrData_im_reg;
    SDFCummutator_wrEnb_reg_next = SDFCummutator_wrEnb_reg;
    SDFCummutator_wrXData_re_reg_next = SDFCummutator_wrXData_re_reg;
    SDFCummutator_wrXData_im_reg_next = SDFCummutator_wrXData_im_reg;
    SDFCummutator_xWrAddr_next = SDFCummutator_xWrAddr;
    SDFCummutator_wrxEnb_reg_next = SDFCummutator_wrxEnb_reg;
    SDFCummutator_xRdAddr_next = SDFCummutator_xRdAddr;
    SDFCummutator_XState_next = SDFCummutator_XState;
    SDFCummutator_rdEnb_xmem_next = SDFCummutator_rdEnb_xmem;
    SDFCummutator_wrEnb_xmem_next = SDFCummutator_wrEnb_xmem;
    SDFCummutator_xX_vld_reg_next = SDFCummutator_xX_vld_reg;
    case ( SDFCummutator_XState)
      3'b000 :
        begin
          SDFCummutator_wrXData_re_reg_next = 26'sb00000000000000000000000000;
          SDFCummutator_wrXData_im_reg_next = 26'sb00000000000000000000000000;
          SDFCummutator_xWrAddr_next = 3'b000;
          SDFCummutator_xRdAddr_next = 3'b000;
          SDFCummutator_wrxEnb_reg_next = 1'b0;
          SDFCummutator_xX_vld_reg_next = 1'b0;
          SDFCummutator_XState_next = 3'b000;
          if ((SDFCummutator_wrEnb_xmem && (SDFCummutator_wrAddr_reg == 5'b10111)) && SDFCummutator_wrEnb_reg) begin
            SDFCummutator_wrXData_re_reg_next = btf2_re;
            SDFCummutator_wrXData_im_reg_next = btf2_im;
            SDFCummutator_xWrAddr_next = 3'b000;
            if (btf_vld) begin
              SDFCummutator_wrxEnb_reg_next = 1'b1;
              SDFCummutator_XState_next = 3'b010;
            end
            else begin
              SDFCummutator_wrxEnb_reg_next = 1'b0;
              SDFCummutator_XState_next = 3'b001;
            end
          end
        end
      3'b001 :
        begin
          SDFCummutator_XState_next = 3'b001;
          SDFCummutator_xX_vld_reg_next = 1'b0;
          if (btf_vld) begin
            SDFCummutator_wrXData_re_reg_next = btf2_re;
            SDFCummutator_wrXData_im_reg_next = btf2_im;
            SDFCummutator_xWrAddr_next = 3'b000;
            SDFCummutator_wrxEnb_reg_next = 1'b1;
            SDFCummutator_XState_next = 3'b010;
          end
        end
      3'b010 :
        begin
          SDFCummutator_wrXData_re_reg_next = btf2_re;
          SDFCummutator_wrXData_im_reg_next = btf2_im;
          SDFCummutator_xX_vld_reg_next = 1'b0;
          if (SDFCummutator_xWrAddr == 3'b111) begin
            SDFCummutator_wrxEnb_reg_next = 1'b0;
            if (SDFCummutator_rdEnb_xmem) begin
              SDFCummutator_XState_next = 3'b100;
              SDFCummutator_xX_vld_reg_next = 1'b1;
              SDFCummutator_xRdAddr_next = 3'b001;
            end
            else begin
              SDFCummutator_XState_next = 3'b011;
            end
            SDFCummutator_xWrAddr_next = 3'b000;
          end
          else if (btf_vld) begin
            SDFCummutator_XState_next = 3'b010;
            SDFCummutator_wrxEnb_reg_next = 1'b1;
            SDFCummutator_xWrAddr_next = SDFCummutator_xWrAddr + 3'b001;
          end
          else begin
            SDFCummutator_XState_next = 3'b010;
            SDFCummutator_wrxEnb_reg_next = 1'b0;
          end
        end
      3'b011 :
        begin
          if (SDFCummutator_rdEnb_xmem) begin
            SDFCummutator_XState_next = 3'b100;
            SDFCummutator_xX_vld_reg_next = 1'b1;
            SDFCummutator_xRdAddr_next = 3'b001;
          end
        end
      3'b100 :
        begin
          if (SDFCummutator_xRdAddr == 3'b111) begin
            SDFCummutator_xX_vld_reg_next = 1'b1;
            SDFCummutator_xWrAddr_next = 3'b000;
            SDFCummutator_xRdAddr_next = 3'b000;
            if (SDFCummutator_wrEnb_xmem) begin
              SDFCummutator_wrXData_re_reg_next = btf2_re;
              SDFCummutator_wrXData_im_reg_next = btf2_im;
              if (btf_vld) begin
                SDFCummutator_wrxEnb_reg_next = 1'b1;
                SDFCummutator_XState_next = 3'b010;
              end
              else begin
                SDFCummutator_wrxEnb_reg_next = 1'b0;
                SDFCummutator_XState_next = 3'b001;
              end
            end
            else begin
              SDFCummutator_XState_next = 3'b000;
              SDFCummutator_wrxEnb_reg_next = 1'b0;
              SDFCummutator_wrXData_re_reg_next = 26'sb00000000000000000000000000;
              SDFCummutator_wrXData_im_reg_next = 26'sb00000000000000000000000000;
            end
          end
          else begin
            SDFCummutator_xRdAddr_next = SDFCummutator_xRdAddr + 3'b001;
          end
        end
      default :
        begin
          SDFCummutator_wrXData_re_reg_next = 26'sb00000000000000000000000000;
          SDFCummutator_wrXData_im_reg_next = 26'sb00000000000000000000000000;
          SDFCummutator_xWrAddr_next = 3'b000;
          SDFCummutator_xRdAddr_next = 3'b000;
          SDFCummutator_wrxEnb_reg_next = 1'b0;
          SDFCummutator_XState_next = 3'b000;
        end
    endcase
    case ( SDFCummutator_mem_btf_switch)
      2'b00 :
        begin
          SDFCummutator_mem_btf_switch_next = 2'b00;
          SDFCummutator_rdCnt_next = 5'b00000;
          SDFCummutator_out_re_next = xf_re;
          SDFCummutator_out_im_next = xf_im;
          SDFCummutator_out_vld_next = 1'b0;
          SDFCummutator_rdEnb_xmem_next = 1'b0;
          if (dinxTwdlf_vld) begin
            SDFCummutator_mem_btf_switch_next = 2'b01;
            SDFCummutator_rdCnt_next = 5'b00000;
          end
        end
      2'b01 :
        begin
          SDFCummutator_mem_btf_switch_next = 2'b01;
          SDFCummutator_rdEnb_xmem_next = 1'b0;
          if ((SDFCummutator_rdCnt == 5'b11111) && btf_vld) begin
            SDFCummutator_mem_btf_switch_next = 2'b10;
          end
          if (btf_vld) begin
            SDFCummutator_rdCnt_next = SDFCummutator_rdCnt + 5'b00001;
          end
          SDFCummutator_out_re_next = btf1_re;
          SDFCummutator_out_im_next = btf1_im;
          SDFCummutator_out_vld_next = btf_vld;
        end
      2'b10 :
        begin
          SDFCummutator_mem_btf_switch_next = 2'b10;
          if ((SDFCummutator_rdCnt == 5'b10111) && xf_vld) begin
            SDFCummutator_mem_btf_switch_next = 2'b01;
            SDFCummutator_rdEnb_xmem_next = 1'b1;
          end
          if (xf_vld) begin
            if (SDFCummutator_rdCnt == 5'b10111) begin
              SDFCummutator_rdCnt_next = 5'b00000;
            end
            else begin
              SDFCummutator_rdCnt_next = SDFCummutator_rdCnt + 5'b00001;
            end
          end
          SDFCummutator_out_re_next = xf_re;
          SDFCummutator_out_im_next = xf_im;
          SDFCummutator_out_vld_next = xf_vld;
        end
      default :
        begin
          SDFCummutator_mem_btf_switch_next = 2'b00;
          SDFCummutator_rdCnt_next = 5'b00000;
          SDFCummutator_out_re_next = xf_re;
          SDFCummutator_out_im_next = xf_im;
          SDFCummutator_out_vld_next = xf_vld;
        end
    endcase
    case ( SDFCummutator_wrState)
      3'b000 :
        begin
          SDFCummutator_wrState_next = 3'b000;
          SDFCummutator_wrEnb_xmem_next = 1'b0;
          SDFCummutator_wrAddr_reg_next = 5'b00000;
          SDFCummutator_wrData_re_reg_next = dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next = dinXTwdlf_im;
          if (dinxTwdlf_vld) begin
            SDFCummutator_wrState_next = 3'b001;
            SDFCummutator_wrAddr_reg_next = 5'b00000;
            SDFCummutator_wrEnb_reg_next = 1'b1;
          end
        end
      3'b001 :
        begin
          SDFCummutator_wrState_next = 3'b001;
          SDFCummutator_wrEnb_reg_next = 1'b0;
          SDFCummutator_wrEnb_xmem_next = 1'b0;
          if (SDFCummutator_wrAddr_reg == 5'b11111) begin
            if (btf_vld) begin
              SDFCummutator_wrState_next = 3'b010;
            end
            else begin
              SDFCummutator_wrState_next = 3'b100;
            end
            SDFCummutator_wrAddr_reg_next = 5'b00000;
            SDFCummutator_wrEnb_reg_next = btf_vld;
            SDFCummutator_wrData_re_reg_next = btf2_re;
            SDFCummutator_wrData_im_reg_next = btf2_im;
          end
          else if (dinxTwdlf_vld) begin
            SDFCummutator_wrState_next = 3'b001;
            SDFCummutator_wrAddr_reg_next = SDFCummutator_wrAddr_reg + 5'b00001;
            SDFCummutator_wrEnb_reg_next = 1'b1;
            SDFCummutator_wrData_re_reg_next = dinXTwdlf_re;
            SDFCummutator_wrData_im_reg_next = dinXTwdlf_im;
          end
        end
      3'b010 :
        begin
          SDFCummutator_wrState_next = 3'b010;
          SDFCummutator_wrEnb_reg_next = 1'b0;
          SDFCummutator_wrEnb_xmem_next = 1'b0;
          if (SDFCummutator_wrAddr_reg == 5'b10110) begin
            SDFCummutator_wrEnb_xmem_next = 1'b1;
          end
          if (SDFCummutator_wrAddr_reg == 5'b10111) begin
            SDFCummutator_wrAddr_reg_next = SDFCummutator_wrAddr_reg + 5'b00001;
            SDFCummutator_wrState_next = 3'b011;
            SDFCummutator_wrEnb_reg_next = 1'b0;
            SDFCummutator_wrData_re_reg_next = dinXTwdlf_re;
            SDFCummutator_wrData_im_reg_next = dinXTwdlf_im;
          end
          else if (btf_vld) begin
            SDFCummutator_wrState_next = 3'b010;
            SDFCummutator_wrAddr_reg_next = SDFCummutator_wrAddr_reg + 5'b00001;
            SDFCummutator_wrEnb_reg_next = 1'b1;
            SDFCummutator_wrData_re_reg_next = btf2_re;
            SDFCummutator_wrData_im_reg_next = btf2_im;
          end
        end
      3'b011 :
        begin
          SDFCummutator_wrAddr_reg_next = 5'b00000;
          SDFCummutator_wrEnb_reg_next = dinxTwdlf_vld;
          SDFCummutator_wrData_re_reg_next = dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next = dinXTwdlf_im;
          SDFCummutator_wrEnb_xmem_next = 1'b0;
          if (dinxTwdlf_vld) begin
            SDFCummutator_wrState_next = 3'b001;
          end
          else begin
            SDFCummutator_wrState_next = 3'b000;
          end
        end
      3'b100 :
        begin
          SDFCummutator_wrState_next = 3'b100;
          SDFCummutator_wrEnb_reg_next = 1'b0;
          SDFCummutator_wrEnb_xmem_next = 1'b0;
          if (btf_vld) begin
            SDFCummutator_wrState_next = 3'b010;
            SDFCummutator_wrAddr_reg_next = 5'b00000;
            SDFCummutator_wrEnb_reg_next = 1'b1;
            SDFCummutator_wrData_re_reg_next = btf2_re;
            SDFCummutator_wrData_im_reg_next = btf2_im;
          end
        end
      default :
        begin
          SDFCummutator_wrState_next = 3'b000;
          SDFCummutator_wrAddr_reg_next = 5'b00000;
          SDFCummutator_wrEnb_reg_next = dinxTwdlf_vld;
          SDFCummutator_wrData_re_reg_next = dinXTwdlf_re;
          SDFCummutator_wrData_im_reg_next = dinXTwdlf_im;
        end
    endcase
    wrData_re_1 = SDFCummutator_wrData_re_reg;
    wrData_im_1 = SDFCummutator_wrData_im_reg;
    wrAddr_1 = SDFCummutator_wrAddr_reg;
    wrEnb_1 = SDFCummutator_wrEnb_reg;
    xData_re = SDFCummutator_wrXData_re_reg;
    xData_im = SDFCummutator_wrXData_im_reg;
    wrXAddr = SDFCummutator_xWrAddr;
    wrXEnb = SDFCummutator_wrxEnb_reg;
    rdXAddr = SDFCummutator_xRdAddr;
    xX_vld = SDFCummutator_xX_vld_reg;
    dout0_re = SDFCummutator_out_re;
    dout0_im = SDFCummutator_out_im;
    dout0_vld = SDFCummutator_out_vld;
  end



  SimpleDualPortRAM_generic #(.AddrWidth(3),
                              .DataWidth(26)
                              )
                            u_dataXMEM_re_0_5 (.clk(clk),
                                               .enb(enb),
                                               .wr_din(xData_re),
                                               .wr_addr(wrXAddr),
                                               .wr_en(wrXEnb),
                                               .rd_addr(rdXAddr),
                                               .dout(xX_re)
                                               );

  SimpleDualPortRAM_generic #(.AddrWidth(3),
                              .DataWidth(26)
                              )
                            u_dataXMEM_im_0_5 (.clk(clk),
                                               .enb(enb),
                                               .wr_din(xData_im),
                                               .wr_addr(wrXAddr),
                                               .wr_en(wrXEnb),
                                               .rd_addr(rdXAddr),
                                               .dout(xX_im)
                                               );

  // SDFOutmux
  always_ff @(posedge clk or posedge reset)
    begin : SDFOutmux_process
      if (reset == 1'b1) begin
        SDFOutmux_btf2Pipe_re <= 26'sb00000000000000000000000000;
        SDFOutmux_btf2Pipe_im <= 26'sb00000000000000000000000000;
        SDFOutmux_btfPipe_vld <= 1'b0;
      end
      else begin
        if (enb) begin
          SDFOutmux_btf2Pipe_re <= SDFOutmux_btf2Pipe_re_next;
          SDFOutmux_btf2Pipe_im <= SDFOutmux_btf2Pipe_im_next;
          SDFOutmux_btfPipe_vld <= SDFOutmux_btfPipe_vld_next;
        end
      end
    end

  always @(SDFOutmux_btf2Pipe_im, SDFOutmux_btf2Pipe_re, SDFOutmux_btfPipe_vld, dout0_im,
       dout0_re, dout0_vld, xX_im, xX_re, xX_vld) begin
    SDFOutmux_btf2Pipe_re_next = SDFOutmux_btf2Pipe_re;
    SDFOutmux_btf2Pipe_im_next = SDFOutmux_btf2Pipe_im;
    if (dout0_vld) begin
      SDFOutmux_btf2Pipe_re_next = dout0_re;
      SDFOutmux_btf2Pipe_im_next = dout0_im;
      SDFOutmux_btfPipe_vld_next = 1'b1;
    end
    else if (xX_vld) begin
      SDFOutmux_btf2Pipe_re_next = xX_re;
      SDFOutmux_btf2Pipe_im_next = xX_im;
      SDFOutmux_btfPipe_vld_next = 1'b1;
    end
    else begin
      SDFOutmux_btfPipe_vld_next = 1'b0;
    end
    dout_5_1_re_1 = SDFOutmux_btf2Pipe_re;
    dout_5_1_im_1 = SDFOutmux_btf2Pipe_im;
    dout_5_1_vld_1 = SDFOutmux_btfPipe_vld;
  end



  assign wrData_re = wrData_re_1;

  assign wrData_im = wrData_im_1;

  assign wrAddr = wrAddr_1;

  assign wrEnb = wrEnb_1;

  assign dout_5_1_re = dout_5_1_re_1;

  assign dout_5_1_im = dout_5_1_im_1;

  assign dout_5_1_vld = dout_5_1_vld_1;

endmodule  // SDFCommutator5

