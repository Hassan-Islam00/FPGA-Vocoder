// -------------------------------------------------------------
// 
// File Name: C:\Users\Hassa\Documents\GitHub\vocoder\MATLAB\MATLAB_CodeGen\codegen\envelopeModulation\hdlsrc\TWDLROM_7_1_block.sv
// Created: 2024-03-28 20:55:43
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// -------------------------------------------------------------


import envelopeModulation_fixpt_pkg::* ;

// -------------------------------------------------------------
// 
// Module: TWDLROM_7_1_block
// Source Path: envelopeModulation_fixpt/dsphdl.FFT/TWDLROM_7_1
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module TWDLROM_7_1_block
          #(  parameter vector_of_signed_logic_13 table_data [0:127] = '{2048, 2048, 2048, 2048, 2047, 2047, 2047, 2046, 2046, 2045, 2044, 2043, 2042, 2041, 2040, 2039, 2038, 2037,
             2036, 2034, 2033, 2031, 2029, 2028, 2026, 2024, 2022, 2020, 2018, 2016, 2013, 2011, 2009, 2006, 2004, 2001,
             1998, 1995, 1993, 1990, 1987, 1984, 1980, 1977, 1974, 1970, 1967, 1963, 1960, 1956, 1952, 1949, 1945, 1941,
             1937, 1932, 1928, 1924, 1920, 1915, 1911, 1906, 1902, 1897, 1892, 1887, 1882, 1877, 1872, 1867, 1862, 1857,
             1851, 1846, 1840, 1835, 1829, 1824, 1818, 1812, 1806, 1800, 1794, 1788, 1782, 1776, 1769, 1763, 1757, 1750,
             1744, 1737, 1730, 1724, 1717, 1710, 1703, 1696, 1689, 1682, 1674, 1667, 1660, 1652, 1645, 1637, 1630, 1622,
             1615, 1607, 1599, 1591, 1583, 1575, 1567, 1559, 1551, 1543, 1534, 1526, 1517, 1509, 1500, 1492, 1483, 1475,
             1466, 1457}  /* sfix13 [128] */,
              parameter vector_of_signed_logic_13 table_data_2 [0:127] = '{0, -13, -25, -38, -50, -63, -75, -88, -100, -113, -126, -138, -151, -163, -176, -188, -201, -213, -226,
             -238, -251, -263, -276, -288, -301, -313, -325, -338, -350, -363, -375, -387, -400, -412, -424, -436, -449,
             -461, -473, -485, -498, -510, -522, -534, -546, -558, -570, -582, -595, -607, -619, -630, -642, -654, -666,
             -678, -690, -702, -714, -725, -737, -749, -760, -772, -784, -795, -807, -818, -830, -841, -853, -864, -876,
             -887, -898, -910, -921, -932, -943, -954, -965, -976, -988, -999, -1009, -1020, -1031, -1042, -1053, -1064,
             -1074, -1085, -1096, -1106, -1117, -1127, -1138, -1148, -1159, -1169, -1179, -1190, -1200, -1210, -1220,
             -1230, -1240, -1250, -1260, -1270, -1280, -1289, -1299, -1309, -1319, -1328, -1338, -1347, -1357, -1366,
             -1375, -1385, -1394, -1403, -1412, -1421, -1430, -1439}  /* sfix13 [128] */)
          (  input logic clk,
             input logic reset,
             input logic enb,
             input logic dout_6_1_vld,
             input logic softReset,
             output logic signed [12:0] twdl_7_1_re  /* sfix13_En11 */,
             output logic signed [12:0] twdl_7_1_im  /* sfix13_En11 */,
             output logic twdl_7_1_vld);


  logic [7:0] Radix22TwdlMapping_cnt;  /* ufix8 */
  logic [1:0] Radix22TwdlMapping_phase;  /* ufix2 */
  logic [2:0] Radix22TwdlMapping_octantReg1;  /* ufix3 */
  logic [9:0] Radix22TwdlMapping_twdlAddr_raw;  /* ufix10 */
  logic [6:0] Radix22TwdlMapping_twdlAddrMap;  /* ufix7 */
  logic Radix22TwdlMapping_twdl45Reg;
  logic Radix22TwdlMapping_dvldReg1;
  logic Radix22TwdlMapping_dvldReg2;
  logic [7:0] Radix22TwdlMapping_cnt_next;  /* ufix8 */
  logic [1:0] Radix22TwdlMapping_phase_next;  /* ufix2 */
  logic [2:0] Radix22TwdlMapping_octantReg1_next;  /* ufix3 */
  logic [9:0] Radix22TwdlMapping_twdlAddr_raw_next;  /* ufix10 */
  logic [6:0] Radix22TwdlMapping_twdlAddrMap_next;  /* ufix7 */
  logic Radix22TwdlMapping_twdl45Reg_next;
  logic Radix22TwdlMapping_dvldReg1_next;
  logic Radix22TwdlMapping_dvldReg2_next;
  logic [6:0] twdlAddr;  /* ufix7 */
  logic twdlAddrVld;
  logic [2:0] twdlOctant;  /* ufix3 */
  logic twdl45;
  logic signed [12:0] twiddleS_re;  /* sfix13_En11 */
  logic signed [12:0] twiddleReg_re;  /* sfix13_En11 */
  logic signed [12:0] twiddleS_im;  /* sfix13_En11 */
  logic signed [12:0] twiddleReg_im;  /* sfix13_En11 */
  logic [2:0] twdlOctantReg;  /* ufix3 */
  logic twdl45Reg;
  logic signed [12:0] twdl_7_1_re_1;  /* sfix13_En11 */
  logic signed [12:0] twdl_7_1_im_1;  /* sfix13_En11 */
  logic twdl_7_1_vld_1;
  logic [2:0] Radix22TwdlMapping_octant;  /* ufix3 */
  logic [9:0] Radix22TwdlMapping_cnt_cast;  /* ufix10 */
  logic signed [21:0] Radix22TwdlMapping_sub_cast;  /* sfix22_En7 */
  logic signed [21:0] Radix22TwdlMapping_sub_temp;  /* sfix22_En7 */
  logic signed [11:0] Radix22TwdlMapping_sub_temp_0;  /* sfix12 */
  logic signed [11:0] Radix22TwdlMapping_sub_temp_1;  /* sfix12 */
  logic signed [21:0] Radix22TwdlMapping_sub_cast_0;  /* sfix22_En7 */
  logic signed [21:0] Radix22TwdlMapping_sub_temp_2;  /* sfix22_En7 */
  logic signed [21:0] Radix22TwdlMapping_sub_cast_1;  /* sfix22_En7 */
  logic signed [21:0] Radix22TwdlMapping_sub_temp_3;  /* sfix22_En7 */
  logic [9:0] Radix22TwdlMapping_t_0;  /* ufix10 */
  logic signed [11:0] Radix22TwdlMapping_t_1;  /* sfix12 */
  logic signed [11:0] Radix22TwdlMapping_t_2;  /* sfix12 */
  logic signed [12:0] Radix22TwdlOctCorr_twdlIn_re;  /* sfix13_En11 */
  logic signed [12:0] Radix22TwdlOctCorr_twdlIn_im;  /* sfix13_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_0;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_1;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_2;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_3;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_4;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_5;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_6;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_7;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_8;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_9;  /* sfix14_En11 */
  logic signed [13:0] Radix22TwdlOctCorr_cast_10;  /* sfix14_En11 */


  // Radix22TwdlMapping
  always_ff @(posedge clk or posedge reset)
    begin : Radix22TwdlMapping_process
      if (reset == 1'b1) begin
        Radix22TwdlMapping_octantReg1 <= 3'b000;
        Radix22TwdlMapping_twdlAddr_raw <= 10'b0000000000;
        Radix22TwdlMapping_twdlAddrMap <= 7'b0000000;
        Radix22TwdlMapping_twdl45Reg <= 1'b0;
        Radix22TwdlMapping_dvldReg1 <= 1'b0;
        Radix22TwdlMapping_dvldReg2 <= 1'b0;
        Radix22TwdlMapping_cnt <= 8'b00000000;
        Radix22TwdlMapping_phase <= 2'b00;
      end
      else begin
        if (enb) begin
          Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
          Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
          Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
          Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
          Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
          Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
          Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
          Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
        end
      end
    end

  always @(Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_6_1_vld) begin
    Radix22TwdlMapping_sub_temp = 22'sb0000000000000000000000;
    Radix22TwdlMapping_sub_temp_0 = 12'sb000000000000;
    Radix22TwdlMapping_sub_temp_1 = 12'sb000000000000;
    Radix22TwdlMapping_sub_temp_2 = 22'sb0000000000000000000000;
    Radix22TwdlMapping_sub_temp_3 = 22'sb0000000000000000000000;
    Radix22TwdlMapping_sub_cast_1 = 22'sb0000000000000000000000;
    Radix22TwdlMapping_t_0 = 10'b0000000000;
    Radix22TwdlMapping_cnt_cast = 10'b0000000000;
    Radix22TwdlMapping_sub_cast_0 = 22'sb0000000000000000000000;
    Radix22TwdlMapping_t_2 = 12'sb000000000000;
    Radix22TwdlMapping_t_1 = 12'sb000000000000;
    Radix22TwdlMapping_sub_cast = 22'sb0000000000000000000000;
    Radix22TwdlMapping_cnt_next = Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next = Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next = Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next = dout_6_1_vld;
    case ( Radix22TwdlMapping_twdlAddr_raw)
      10'b0010000000 :
        begin
          Radix22TwdlMapping_octant = 3'b000;
          Radix22TwdlMapping_twdl45Reg_next = 1'b1;
        end
      10'b0100000000 :
        begin
          Radix22TwdlMapping_octant = 3'b001;
          Radix22TwdlMapping_twdl45Reg_next = 1'b0;
        end
      10'b0110000000 :
        begin
          Radix22TwdlMapping_octant = 3'b010;
          Radix22TwdlMapping_twdl45Reg_next = 1'b1;
        end
      10'b1000000000 :
        begin
          Radix22TwdlMapping_octant = 3'b011;
          Radix22TwdlMapping_twdl45Reg_next = 1'b0;
        end
      10'b1010000000 :
        begin
          Radix22TwdlMapping_octant = 3'b100;
          Radix22TwdlMapping_twdl45Reg_next = 1'b1;
        end
      default :
        begin
          Radix22TwdlMapping_octant = Radix22TwdlMapping_twdlAddr_raw[9:7];
          Radix22TwdlMapping_twdl45Reg_next = 1'b0;
        end
    endcase
    Radix22TwdlMapping_octantReg1_next = Radix22TwdlMapping_octant;
    case ( Radix22TwdlMapping_octant)
      3'b000 :
        begin
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_twdlAddr_raw[6:0];
        end
      3'b001 :
        begin
          Radix22TwdlMapping_t_1 = {2'b0, Radix22TwdlMapping_twdlAddr_raw};
          Radix22TwdlMapping_sub_temp_0 = 12'sb000100000000 - Radix22TwdlMapping_t_1;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp_0[6:0];
        end
      3'b010 :
        begin
          Radix22TwdlMapping_t_2 = {2'b0, Radix22TwdlMapping_twdlAddr_raw};
          Radix22TwdlMapping_sub_temp_1 = Radix22TwdlMapping_t_2 - 12'sb000100000000;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp_1[6:0];
        end
      3'b011 :
        begin
          Radix22TwdlMapping_sub_cast_0 = {5'b0, {Radix22TwdlMapping_twdlAddr_raw, 7'b0000000}};
          Radix22TwdlMapping_sub_temp_2 = 22'sb0000010000000000000000 - Radix22TwdlMapping_sub_cast_0;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp_2[13:7];
        end
      3'b100 :
        begin
          Radix22TwdlMapping_sub_cast_1 = {5'b0, {Radix22TwdlMapping_twdlAddr_raw, 7'b0000000}};
          Radix22TwdlMapping_sub_temp_3 = Radix22TwdlMapping_sub_cast_1 - 22'sb0000010000000000000000;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp_3[13:7];
        end
      default :
        begin
          Radix22TwdlMapping_sub_cast = {5'b0, {Radix22TwdlMapping_twdlAddr_raw, 7'b0000000}};
          Radix22TwdlMapping_sub_temp = 22'sb0000011000000000000000 - Radix22TwdlMapping_sub_cast;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp[13:7];
        end
    endcase
    if (Radix22TwdlMapping_phase == 2'b00) begin
      Radix22TwdlMapping_twdlAddr_raw_next = 10'b0000000000;
    end
    else if (Radix22TwdlMapping_phase == 2'b01) begin
      Radix22TwdlMapping_t_0 = {2'b0, Radix22TwdlMapping_cnt};
      Radix22TwdlMapping_twdlAddr_raw_next = Radix22TwdlMapping_t_0 <<< 8'd1;
    end
    else if (Radix22TwdlMapping_phase == 2'b10) begin
      Radix22TwdlMapping_twdlAddr_raw_next = {2'b0, Radix22TwdlMapping_cnt};
    end
    else begin
      Radix22TwdlMapping_cnt_cast = {2'b0, Radix22TwdlMapping_cnt};
      Radix22TwdlMapping_twdlAddr_raw_next = (Radix22TwdlMapping_cnt_cast <<< 8'd1) + Radix22TwdlMapping_cnt_cast;
    end
    if (dout_6_1_vld && (Radix22TwdlMapping_cnt > 8'b11101111)) begin
      Radix22TwdlMapping_phase_next = Radix22TwdlMapping_phase + 2'b01;
    end
    if (dout_6_1_vld) begin
      Radix22TwdlMapping_cnt_next = Radix22TwdlMapping_cnt + 8'b00010000;
    end
    twdlAddr = Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld = Radix22TwdlMapping_dvldReg2;
    twdlOctant = Radix22TwdlMapping_octantReg1;
    twdl45 = Radix22TwdlMapping_twdl45Reg;
  end



  // Twiddle ROM1
  assign twiddleS_re = table_data[twdlAddr];



  always_ff @(posedge clk or posedge reset)
    begin : TWIDDLEROM_RE_process
      if (reset == 1'b1) begin
        twiddleReg_re <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          twiddleReg_re <= twiddleS_re;
        end
      end
    end



  // Twiddle ROM2
  assign twiddleS_im = table_data_2[twdlAddr];



  always_ff @(posedge clk or posedge reset)
    begin : TWIDDLEROM_IM_process
      if (reset == 1'b1) begin
        twiddleReg_im <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          twiddleReg_im <= twiddleS_im;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        twdlOctantReg <= 3'b000;
      end
      else begin
        if (enb) begin
          twdlOctantReg <= twdlOctant;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        twdl45Reg <= 1'b0;
      end
      else begin
        if (enb) begin
          twdl45Reg <= twdl45;
        end
      end
    end



  // Radix22TwdlOctCorr
  always @(twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re) begin
    Radix22TwdlOctCorr_cast_0 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_2 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_4 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_6 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_8 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_10 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_3 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_9 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_1 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_7 = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast = 14'sb00000000000000;
    Radix22TwdlOctCorr_cast_5 = 14'sb00000000000000;
    Radix22TwdlOctCorr_twdlIn_re = twiddleReg_re;
    Radix22TwdlOctCorr_twdlIn_im = twiddleReg_im;
    if (twdl45Reg) begin
      case ( twdlOctantReg)
        3'b000 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 13'sb0010110101000;
            Radix22TwdlOctCorr_twdlIn_im = 13'sb1101001011000;
          end
        3'b010 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 13'sb1101001011000;
            Radix22TwdlOctCorr_twdlIn_im = 13'sb1101001011000;
          end
        3'b100 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 13'sb1101001011000;
            Radix22TwdlOctCorr_twdlIn_im = 13'sb0010110101000;
          end
        default :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 13'sb0010110101000;
            Radix22TwdlOctCorr_twdlIn_im = 13'sb1101001011000;
          end
      endcase
    end
    else begin
      case ( twdlOctantReg)
        3'b000 :
          begin
          end
        3'b001 :
          begin
            Radix22TwdlOctCorr_cast = {twiddleReg_im[12], twiddleReg_im};
            Radix22TwdlOctCorr_cast_0 =  - (Radix22TwdlOctCorr_cast);
            Radix22TwdlOctCorr_twdlIn_re = Radix22TwdlOctCorr_cast_0[12:0];
            Radix22TwdlOctCorr_cast_5 = {twiddleReg_re[12], twiddleReg_re};
            Radix22TwdlOctCorr_cast_6 =  - (Radix22TwdlOctCorr_cast_5);
            Radix22TwdlOctCorr_twdlIn_im = Radix22TwdlOctCorr_cast_6[12:0];
          end
        3'b010 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = twiddleReg_im;
            Radix22TwdlOctCorr_cast_7 = {twiddleReg_re[12], twiddleReg_re};
            Radix22TwdlOctCorr_cast_8 =  - (Radix22TwdlOctCorr_cast_7);
            Radix22TwdlOctCorr_twdlIn_im = Radix22TwdlOctCorr_cast_8[12:0];
          end
        3'b011 :
          begin
            Radix22TwdlOctCorr_cast_1 = {twiddleReg_re[12], twiddleReg_re};
            Radix22TwdlOctCorr_cast_2 =  - (Radix22TwdlOctCorr_cast_1);
            Radix22TwdlOctCorr_twdlIn_re = Radix22TwdlOctCorr_cast_2[12:0];
            Radix22TwdlOctCorr_twdlIn_im = twiddleReg_im;
          end
        3'b100 :
          begin
            Radix22TwdlOctCorr_cast_3 = {twiddleReg_re[12], twiddleReg_re};
            Radix22TwdlOctCorr_cast_4 =  - (Radix22TwdlOctCorr_cast_3);
            Radix22TwdlOctCorr_twdlIn_re = Radix22TwdlOctCorr_cast_4[12:0];
            Radix22TwdlOctCorr_cast_9 = {twiddleReg_im[12], twiddleReg_im};
            Radix22TwdlOctCorr_cast_10 =  - (Radix22TwdlOctCorr_cast_9);
            Radix22TwdlOctCorr_twdlIn_im = Radix22TwdlOctCorr_cast_10[12:0];
          end
        default :
          begin
            Radix22TwdlOctCorr_twdlIn_re = twiddleReg_im;
            Radix22TwdlOctCorr_twdlIn_im = twiddleReg_re;
          end
      endcase
    end
    twdl_7_1_re_1 = Radix22TwdlOctCorr_twdlIn_re;
    twdl_7_1_im_1 = Radix22TwdlOctCorr_twdlIn_im;
  end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        twdl_7_1_vld_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          twdl_7_1_vld_1 <= twdlAddrVld;
        end
      end
    end



  assign twdl_7_1_re = twdl_7_1_re_1;

  assign twdl_7_1_im = twdl_7_1_im_1;

  assign twdl_7_1_vld = twdl_7_1_vld_1;

endmodule  // TWDLROM_7_1_block

