// -------------------------------------------------------------
// 
// File Name: C:\Users\Hassa\Documents\GitHub\vocoder\MATLAB\MATLAB_CodeGen\codegen\envelopeModulation\hdlsrc\HDL_CMA_core.sv
// Created: 2024-03-28 20:55:43
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// -------------------------------------------------------------


import envelopeModulation_fixpt_pkg::* ;

// -------------------------------------------------------------
// 
// Module: HDL_CMA_core
// Source Path: envelopeModulation_fixpt/HDL_CMA_core
// Hierarchy Level: 1
// 
// Complex to Magnitude-Angle
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_CMA_core
          (  input logic clk,
             input logic reset,
             input logic enb,
             input logic signed [22:0] In_re  /* sfix23 */,
             input logic signed [22:0] In_im  /* sfix23 */,
             input logic validIn,
             output logic signed [23:0] magnitude  /* sfix24 */,
             output logic signed [25:0] angle  /* sfix26_En23 */,
             output logic validOut);


  logic [24:0] Delay_ValidIn_reg;  /* ufix1 [25] */
  logic ValidOutDelayed;
  logic reset_outval;
  logic signed [23:0] qMapReal;  /* sfix24 */
  logic signed [23:0] In1Register;  /* sfix24 */
  logic signed [23:0] qMapImag;  /* sfix24 */
  logic signed [23:0] In2Register;  /* sfix24 */
  logic signed [23:0] XQMapped;  /* sfix24 */
  logic signed [23:0] yQMapped;  /* sfix24 */
  logic [4:0] ControlQC;  /* ufix5 */
  logic signed [23:0] xin1;  /* sfix24 */
  logic signed [23:0] yin1;  /* sfix24 */
  logic signed [23:0] zin1;  /* sfix24_En23 */
  logic [22:0] lut_value1;  /* ufix23_En23 */
  logic [5:0] shift1;  /* ufix6 */
  logic signed [23:0] xout1;  /* sfix24 */
  logic signed [23:0] yout1;  /* sfix24 */
  logic signed [23:0] zout1;  /* sfix24_En23 */
  logic signed [23:0] xin2;  /* sfix24 */
  logic signed [23:0] yin2;  /* sfix24 */
  logic signed [23:0] zin2;  /* sfix24_En23 */
  logic [22:0] lut_value2;  /* ufix23_En23 */
  logic [5:0] shift2;  /* ufix6 */
  logic signed [23:0] xout2;  /* sfix24 */
  logic signed [23:0] yout2;  /* sfix24 */
  logic signed [23:0] zout2;  /* sfix24_En23 */
  logic signed [23:0] xin3;  /* sfix24 */
  logic signed [23:0] yin3;  /* sfix24 */
  logic signed [23:0] zin3;  /* sfix24_En23 */
  logic [22:0] lut_value3;  /* ufix23_En23 */
  logic [5:0] shift3;  /* ufix6 */
  logic signed [23:0] xout3;  /* sfix24 */
  logic signed [23:0] yout3;  /* sfix24 */
  logic signed [23:0] zout3;  /* sfix24_En23 */
  logic signed [23:0] xin4;  /* sfix24 */
  logic signed [23:0] yin4;  /* sfix24 */
  logic signed [23:0] zin4;  /* sfix24_En23 */
  logic [22:0] lut_value4;  /* ufix23_En23 */
  logic [5:0] shift4;  /* ufix6 */
  logic signed [23:0] xout4;  /* sfix24 */
  logic signed [23:0] yout4;  /* sfix24 */
  logic signed [23:0] zout4;  /* sfix24_En23 */
  logic signed [23:0] xin5;  /* sfix24 */
  logic signed [23:0] yin5;  /* sfix24 */
  logic signed [23:0] zin5;  /* sfix24_En23 */
  logic [22:0] lut_value5;  /* ufix23_En23 */
  logic [5:0] shift5;  /* ufix6 */
  logic signed [23:0] xout5;  /* sfix24 */
  logic signed [23:0] yout5;  /* sfix24 */
  logic signed [23:0] zout5;  /* sfix24_En23 */
  logic signed [23:0] xin6;  /* sfix24 */
  logic signed [23:0] yin6;  /* sfix24 */
  logic signed [23:0] zin6;  /* sfix24_En23 */
  logic [22:0] lut_value6;  /* ufix23_En23 */
  logic [5:0] shift6;  /* ufix6 */
  logic signed [23:0] xout6;  /* sfix24 */
  logic signed [23:0] yout6;  /* sfix24 */
  logic signed [23:0] zout6;  /* sfix24_En23 */
  logic signed [23:0] xin7;  /* sfix24 */
  logic signed [23:0] yin7;  /* sfix24 */
  logic signed [23:0] zin7;  /* sfix24_En23 */
  logic [22:0] lut_value7;  /* ufix23_En23 */
  logic [5:0] shift7;  /* ufix6 */
  logic signed [23:0] xout7;  /* sfix24 */
  logic signed [23:0] yout7;  /* sfix24 */
  logic signed [23:0] zout7;  /* sfix24_En23 */
  logic signed [23:0] xin8;  /* sfix24 */
  logic signed [23:0] yin8;  /* sfix24 */
  logic signed [23:0] zin8;  /* sfix24_En23 */
  logic [22:0] lut_value8;  /* ufix23_En23 */
  logic [5:0] shift8;  /* ufix6 */
  logic signed [23:0] xout8;  /* sfix24 */
  logic signed [23:0] yout8;  /* sfix24 */
  logic signed [23:0] zout8;  /* sfix24_En23 */
  logic signed [23:0] xin9;  /* sfix24 */
  logic signed [23:0] yin9;  /* sfix24 */
  logic signed [23:0] zin9;  /* sfix24_En23 */
  logic [22:0] lut_value9;  /* ufix23_En23 */
  logic [5:0] shift9;  /* ufix6 */
  logic signed [23:0] xout9;  /* sfix24 */
  logic signed [23:0] yout9;  /* sfix24 */
  logic signed [23:0] zout9;  /* sfix24_En23 */
  logic signed [23:0] xin10;  /* sfix24 */
  logic signed [23:0] yin10;  /* sfix24 */
  logic signed [23:0] zin10;  /* sfix24_En23 */
  logic [22:0] lut_value10;  /* ufix23_En23 */
  logic [5:0] shift10;  /* ufix6 */
  logic signed [23:0] xout10;  /* sfix24 */
  logic signed [23:0] yout10;  /* sfix24 */
  logic signed [23:0] zout10;  /* sfix24_En23 */
  logic signed [23:0] xin11;  /* sfix24 */
  logic signed [23:0] yin11;  /* sfix24 */
  logic signed [23:0] zin11;  /* sfix24_En23 */
  logic [22:0] lut_value11;  /* ufix23_En23 */
  logic [5:0] shift11;  /* ufix6 */
  logic signed [23:0] xout11;  /* sfix24 */
  logic signed [23:0] yout11;  /* sfix24 */
  logic signed [23:0] zout11;  /* sfix24_En23 */
  logic signed [23:0] xin12;  /* sfix24 */
  logic signed [23:0] yin12;  /* sfix24 */
  logic signed [23:0] zin12;  /* sfix24_En23 */
  logic [22:0] lut_value12;  /* ufix23_En23 */
  logic [5:0] shift12;  /* ufix6 */
  logic signed [23:0] xout12;  /* sfix24 */
  logic signed [23:0] yout12;  /* sfix24 */
  logic signed [23:0] zout12;  /* sfix24_En23 */
  logic signed [23:0] xin13;  /* sfix24 */
  logic signed [23:0] yin13;  /* sfix24 */
  logic signed [23:0] zin13;  /* sfix24_En23 */
  logic [22:0] lut_value13;  /* ufix23_En23 */
  logic [5:0] shift13;  /* ufix6 */
  logic signed [23:0] xout13;  /* sfix24 */
  logic signed [23:0] yout13;  /* sfix24 */
  logic signed [23:0] zout13;  /* sfix24_En23 */
  logic signed [23:0] xin14;  /* sfix24 */
  logic signed [23:0] yin14;  /* sfix24 */
  logic signed [23:0] zin14;  /* sfix24_En23 */
  logic [22:0] lut_value14;  /* ufix23_En23 */
  logic [5:0] shift14;  /* ufix6 */
  logic signed [23:0] xout14;  /* sfix24 */
  logic signed [23:0] yout14;  /* sfix24 */
  logic signed [23:0] zout14;  /* sfix24_En23 */
  logic signed [23:0] xin15;  /* sfix24 */
  logic signed [23:0] yin15;  /* sfix24 */
  logic signed [23:0] zin15;  /* sfix24_En23 */
  logic [22:0] lut_value15;  /* ufix23_En23 */
  logic [5:0] shift15;  /* ufix6 */
  logic signed [23:0] xout15;  /* sfix24 */
  logic signed [23:0] yout15;  /* sfix24 */
  logic signed [23:0] zout15;  /* sfix24_En23 */
  logic signed [23:0] xin16;  /* sfix24 */
  logic signed [23:0] yin16;  /* sfix24 */
  logic signed [23:0] zin16;  /* sfix24_En23 */
  logic [22:0] lut_value16;  /* ufix23_En23 */
  logic [5:0] shift16;  /* ufix6 */
  logic signed [23:0] xout16;  /* sfix24 */
  logic signed [23:0] yout16;  /* sfix24 */
  logic signed [23:0] zout16;  /* sfix24_En23 */
  logic signed [23:0] xin17;  /* sfix24 */
  logic signed [23:0] yin17;  /* sfix24 */
  logic signed [23:0] zin17;  /* sfix24_En23 */
  logic [22:0] lut_value17;  /* ufix23_En23 */
  logic [5:0] shift17;  /* ufix6 */
  logic signed [23:0] xout17;  /* sfix24 */
  logic signed [23:0] yout17;  /* sfix24 */
  logic signed [23:0] zout17;  /* sfix24_En23 */
  logic signed [23:0] xin18;  /* sfix24 */
  logic signed [23:0] yin18;  /* sfix24 */
  logic signed [23:0] zin18;  /* sfix24_En23 */
  logic [22:0] lut_value18;  /* ufix23_En23 */
  logic [5:0] shift18;  /* ufix6 */
  logic signed [23:0] xout18;  /* sfix24 */
  logic signed [23:0] yout18;  /* sfix24 */
  logic signed [23:0] zout18;  /* sfix24_En23 */
  logic signed [23:0] xin19;  /* sfix24 */
  logic signed [23:0] yin19;  /* sfix24 */
  logic signed [23:0] zin19;  /* sfix24_En23 */
  logic [22:0] lut_value19;  /* ufix23_En23 */
  logic [5:0] shift19;  /* ufix6 */
  logic signed [23:0] xout19;  /* sfix24 */
  logic signed [23:0] yout19;  /* sfix24 */
  logic signed [23:0] zout19;  /* sfix24_En23 */
  logic signed [23:0] xin20;  /* sfix24 */
  logic signed [23:0] yin20;  /* sfix24 */
  logic signed [23:0] zin20;  /* sfix24_En23 */
  logic [22:0] lut_value20;  /* ufix23_En23 */
  logic [5:0] shift20;  /* ufix6 */
  logic signed [23:0] xout20;  /* sfix24 */
  logic signed [23:0] yout20;  /* sfix24 */
  logic signed [23:0] zout20;  /* sfix24_En23 */
  logic signed [23:0] xin21;  /* sfix24 */
  logic signed [23:0] yin21;  /* sfix24 */
  logic signed [23:0] zin21;  /* sfix24_En23 */
  logic [22:0] lut_value21;  /* ufix23_En23 */
  logic [5:0] shift21;  /* ufix6 */
  logic signed [23:0] xout21;  /* sfix24 */
  logic signed [23:0] yout21;  /* sfix24 */
  logic signed [23:0] zout21;  /* sfix24_En23 */
  logic signed [23:0] xin22;  /* sfix24 */
  logic signed [23:0] yin22;  /* sfix24 */
  logic signed [23:0] zin22;  /* sfix24_En23 */
  logic [22:0] lut_value22;  /* ufix23_En23 */
  logic [5:0] shift22;  /* ufix6 */
  logic signed [23:0] xout22;  /* sfix24 */
  logic signed [23:0] yout22;  /* sfix24 */
  logic signed [23:0] zout22;  /* sfix24_En23 */
  logic signed [23:0] xin23;  /* sfix24 */
  logic signed [39:0] CSD_Gain_Factor_mul_temp;  /* sfix40_En15 */
  logic signed [38:0] CSD_Gain_Factor_cast;  /* sfix39_En15 */
  logic signed [23:0] xoutscaled;  /* sfix24 */
  logic signed [23:0] zeroC;  /* sfix24 */
  logic signed [23:0] outSwitchMag;  /* sfix24 */
  logic signed [23:0] xin24;  /* sfix24 */
  logic signed [23:0] zin23;  /* sfix24_En23 */
  vector_of_unsigned_logic_5 DelayQC_Control_reg [0:22];  /* ufix5 [23] */
  logic [4:0] ControlQCDelay;  /* ufix5 */
  logic signed [25:0] zout_corrected;  /* sfix26_En23 */
  logic signed [25:0] zeroCA;  /* sfix26_En23 */
  logic signed [25:0] outSwitchAng;  /* sfix26_En23 */
  logic signed [25:0] zout_corrected_1;  /* sfix26_En23 */
  logic validOut_1;


  always_ff @(posedge clk or posedge reset)
    begin : Delay_ValidIn_process
      if (reset == 1'b1) begin
        Delay_ValidIn_reg <= '{25{1'b0}};
      end
      else begin
        if (enb) begin
          Delay_ValidIn_reg[0] <= validIn;
          Delay_ValidIn_reg[32'sd24:32'sd1] <= Delay_ValidIn_reg[32'sd23:32'sd0];
        end
      end
    end

  assign ValidOutDelayed = Delay_ValidIn_reg[24];



  assign reset_outval =  ~ ValidOutDelayed;



  assign qMapReal = {In_re[22], In_re};



  always_ff @(posedge clk or posedge reset)
    begin : DelayRealInput_process
      if (reset == 1'b1) begin
        In1Register <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          In1Register <= qMapReal;
        end
      end
    end



  assign qMapImag = {In_im[22], In_im};



  always_ff @(posedge clk or posedge reset)
    begin : DelayImagInput_process
      if (reset == 1'b1) begin
        In2Register <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          In2Register <= qMapImag;
        end
      end
    end



  Quadrant_Mapper u_QuadrantMapper (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .xin(In1Register),  /* sfix24 */
                                    .yin(In2Register),  /* sfix24 */
                                    .xout(XQMapped),  /* sfix24 */
                                    .yout(yQMapped),  /* sfix24 */
                                    .QA_Control(ControlQC)  /* ufix5 */
                                    );

  always_ff @(posedge clk or posedge reset)
    begin : DelayQuadMapper1_process
      if (reset == 1'b1) begin
        xin1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin1 <= XQMapped;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : DelayQuadMapper2_process
      if (reset == 1'b1) begin
        yin1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin1 <= yQMapped;
        end
      end
    end



  assign zin1 = 24'sb000000000000000000000000;



  assign lut_value1 = 23'b01110110101100011001110;



  assign shift1 = 6'b000001;



  CordicKernelMag u_Iteration (.xin(xin1),  /* sfix24 */
                               .yin(yin1),  /* sfix24 */
                               .zin(zin1),  /* sfix24_En23 */
                               .lut_value(lut_value1),  /* ufix23_En23 */
                               .idx(shift1),  /* ufix6 */
                               .xout(xout1),  /* sfix24 */
                               .yout(yout1),  /* sfix24 */
                               .zout(zout1)  /* sfix24_En23 */
                               );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline1_process
      if (reset == 1'b1) begin
        xin2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin2 <= xout1;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline1_1_process
      if (reset == 1'b1) begin
        yin2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin2 <= yout1;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline1_2_process
      if (reset == 1'b1) begin
        zin2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin2 <= zout1;
        end
      end
    end



  assign lut_value2 = 23'b00111110101101101110110;



  assign shift2 = 6'b000010;



  CordicKernelMag u_Iteration_1 (.xin(xin2),  /* sfix24 */
                                 .yin(yin2),  /* sfix24 */
                                 .zin(zin2),  /* sfix24_En23 */
                                 .lut_value(lut_value2),  /* ufix23_En23 */
                                 .idx(shift2),  /* ufix6 */
                                 .xout(xout2),  /* sfix24 */
                                 .yout(yout2),  /* sfix24 */
                                 .zout(zout2)  /* sfix24_En23 */
                                 );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline2_process
      if (reset == 1'b1) begin
        xin3 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin3 <= xout2;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline2_1_process
      if (reset == 1'b1) begin
        yin3 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin3 <= yout2;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline2_2_process
      if (reset == 1'b1) begin
        zin3 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin3 <= zout2;
        end
      end
    end



  assign lut_value3 = 23'b00011111110101011011101;



  assign shift3 = 6'b000011;



  CordicKernelMag u_Iteration_2 (.xin(xin3),  /* sfix24 */
                                 .yin(yin3),  /* sfix24 */
                                 .zin(zin3),  /* sfix24_En23 */
                                 .lut_value(lut_value3),  /* ufix23_En23 */
                                 .idx(shift3),  /* ufix6 */
                                 .xout(xout3),  /* sfix24 */
                                 .yout(yout3),  /* sfix24 */
                                 .zout(zout3)  /* sfix24_En23 */
                                 );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline3_process
      if (reset == 1'b1) begin
        xin4 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin4 <= xout3;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline3_1_process
      if (reset == 1'b1) begin
        yin4 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin4 <= yout3;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline3_2_process
      if (reset == 1'b1) begin
        zin4 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin4 <= zout3;
        end
      end
    end



  assign lut_value4 = 23'b00001111111110101010111;



  assign shift4 = 6'b000100;



  CordicKernelMag u_Iteration_3 (.xin(xin4),  /* sfix24 */
                                 .yin(yin4),  /* sfix24 */
                                 .zin(zin4),  /* sfix24_En23 */
                                 .lut_value(lut_value4),  /* ufix23_En23 */
                                 .idx(shift4),  /* ufix6 */
                                 .xout(xout4),  /* sfix24 */
                                 .yout(yout4),  /* sfix24 */
                                 .zout(zout4)  /* sfix24_En23 */
                                 );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline4_process
      if (reset == 1'b1) begin
        xin5 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin5 <= xout4;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline4_1_process
      if (reset == 1'b1) begin
        yin5 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin5 <= yout4;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline4_2_process
      if (reset == 1'b1) begin
        zin5 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin5 <= zout4;
        end
      end
    end



  assign lut_value5 = 23'b00000111111111110101011;



  assign shift5 = 6'b000101;



  CordicKernelMag u_Iteration_4 (.xin(xin5),  /* sfix24 */
                                 .yin(yin5),  /* sfix24 */
                                 .zin(zin5),  /* sfix24_En23 */
                                 .lut_value(lut_value5),  /* ufix23_En23 */
                                 .idx(shift5),  /* ufix6 */
                                 .xout(xout5),  /* sfix24 */
                                 .yout(yout5),  /* sfix24 */
                                 .zout(zout5)  /* sfix24_En23 */
                                 );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline5_process
      if (reset == 1'b1) begin
        xin6 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin6 <= xout5;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline5_1_process
      if (reset == 1'b1) begin
        yin6 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin6 <= yout5;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline5_2_process
      if (reset == 1'b1) begin
        zin6 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin6 <= zout5;
        end
      end
    end



  assign lut_value6 = 23'b00000011111111111110101;



  assign shift6 = 6'b000110;



  CordicKernelMag u_Iteration_5 (.xin(xin6),  /* sfix24 */
                                 .yin(yin6),  /* sfix24 */
                                 .zin(zin6),  /* sfix24_En23 */
                                 .lut_value(lut_value6),  /* ufix23_En23 */
                                 .idx(shift6),  /* ufix6 */
                                 .xout(xout6),  /* sfix24 */
                                 .yout(yout6),  /* sfix24 */
                                 .zout(zout6)  /* sfix24_En23 */
                                 );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline6_process
      if (reset == 1'b1) begin
        xin7 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin7 <= xout6;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline6_1_process
      if (reset == 1'b1) begin
        yin7 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin7 <= yout6;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline6_2_process
      if (reset == 1'b1) begin
        zin7 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin7 <= zout6;
        end
      end
    end



  assign lut_value7 = 23'b00000001111111111111111;



  assign shift7 = 6'b000111;



  CordicKernelMag u_Iteration_6 (.xin(xin7),  /* sfix24 */
                                 .yin(yin7),  /* sfix24 */
                                 .zin(zin7),  /* sfix24_En23 */
                                 .lut_value(lut_value7),  /* ufix23_En23 */
                                 .idx(shift7),  /* ufix6 */
                                 .xout(xout7),  /* sfix24 */
                                 .yout(yout7),  /* sfix24 */
                                 .zout(zout7)  /* sfix24_En23 */
                                 );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline7_process
      if (reset == 1'b1) begin
        xin8 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin8 <= xout7;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline7_1_process
      if (reset == 1'b1) begin
        yin8 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin8 <= yout7;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline7_2_process
      if (reset == 1'b1) begin
        zin8 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin8 <= zout7;
        end
      end
    end



  assign lut_value8 = 23'b00000001000000000000000;



  assign shift8 = 6'b001000;



  CordicKernelMag u_Iteration_7 (.xin(xin8),  /* sfix24 */
                                 .yin(yin8),  /* sfix24 */
                                 .zin(zin8),  /* sfix24_En23 */
                                 .lut_value(lut_value8),  /* ufix23_En23 */
                                 .idx(shift8),  /* ufix6 */
                                 .xout(xout8),  /* sfix24 */
                                 .yout(yout8),  /* sfix24 */
                                 .zout(zout8)  /* sfix24_En23 */
                                 );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline8_process
      if (reset == 1'b1) begin
        xin9 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin9 <= xout8;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline8_1_process
      if (reset == 1'b1) begin
        yin9 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin9 <= yout8;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline8_2_process
      if (reset == 1'b1) begin
        zin9 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin9 <= zout8;
        end
      end
    end



  assign lut_value9 = 23'b00000000100000000000000;



  assign shift9 = 6'b001001;



  CordicKernelMag u_Iteration_8 (.xin(xin9),  /* sfix24 */
                                 .yin(yin9),  /* sfix24 */
                                 .zin(zin9),  /* sfix24_En23 */
                                 .lut_value(lut_value9),  /* ufix23_En23 */
                                 .idx(shift9),  /* ufix6 */
                                 .xout(xout9),  /* sfix24 */
                                 .yout(yout9),  /* sfix24 */
                                 .zout(zout9)  /* sfix24_En23 */
                                 );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline9_process
      if (reset == 1'b1) begin
        xin10 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin10 <= xout9;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline9_1_process
      if (reset == 1'b1) begin
        yin10 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin10 <= yout9;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline9_2_process
      if (reset == 1'b1) begin
        zin10 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin10 <= zout9;
        end
      end
    end



  assign lut_value10 = 23'b00000000010000000000000;



  assign shift10 = 6'b001010;



  CordicKernelMag u_Iteration_9 (.xin(xin10),  /* sfix24 */
                                 .yin(yin10),  /* sfix24 */
                                 .zin(zin10),  /* sfix24_En23 */
                                 .lut_value(lut_value10),  /* ufix23_En23 */
                                 .idx(shift10),  /* ufix6 */
                                 .xout(xout10),  /* sfix24 */
                                 .yout(yout10),  /* sfix24 */
                                 .zout(zout10)  /* sfix24_En23 */
                                 );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline10_process
      if (reset == 1'b1) begin
        xin11 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin11 <= xout10;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline10_1_process
      if (reset == 1'b1) begin
        yin11 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin11 <= yout10;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline10_2_process
      if (reset == 1'b1) begin
        zin11 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin11 <= zout10;
        end
      end
    end



  assign lut_value11 = 23'b00000000001000000000000;



  assign shift11 = 6'b001011;



  CordicKernelMag u_Iteration_10 (.xin(xin11),  /* sfix24 */
                                  .yin(yin11),  /* sfix24 */
                                  .zin(zin11),  /* sfix24_En23 */
                                  .lut_value(lut_value11),  /* ufix23_En23 */
                                  .idx(shift11),  /* ufix6 */
                                  .xout(xout11),  /* sfix24 */
                                  .yout(yout11),  /* sfix24 */
                                  .zout(zout11)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline11_process
      if (reset == 1'b1) begin
        xin12 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin12 <= xout11;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline11_1_process
      if (reset == 1'b1) begin
        yin12 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin12 <= yout11;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline11_2_process
      if (reset == 1'b1) begin
        zin12 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin12 <= zout11;
        end
      end
    end



  assign lut_value12 = 23'b00000000000100000000000;



  assign shift12 = 6'b001100;



  CordicKernelMag u_Iteration_11 (.xin(xin12),  /* sfix24 */
                                  .yin(yin12),  /* sfix24 */
                                  .zin(zin12),  /* sfix24_En23 */
                                  .lut_value(lut_value12),  /* ufix23_En23 */
                                  .idx(shift12),  /* ufix6 */
                                  .xout(xout12),  /* sfix24 */
                                  .yout(yout12),  /* sfix24 */
                                  .zout(zout12)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline12_process
      if (reset == 1'b1) begin
        xin13 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin13 <= xout12;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline12_1_process
      if (reset == 1'b1) begin
        yin13 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin13 <= yout12;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline12_2_process
      if (reset == 1'b1) begin
        zin13 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin13 <= zout12;
        end
      end
    end



  assign lut_value13 = 23'b00000000000010000000000;



  assign shift13 = 6'b001101;



  CordicKernelMag u_Iteration_12 (.xin(xin13),  /* sfix24 */
                                  .yin(yin13),  /* sfix24 */
                                  .zin(zin13),  /* sfix24_En23 */
                                  .lut_value(lut_value13),  /* ufix23_En23 */
                                  .idx(shift13),  /* ufix6 */
                                  .xout(xout13),  /* sfix24 */
                                  .yout(yout13),  /* sfix24 */
                                  .zout(zout13)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline13_process
      if (reset == 1'b1) begin
        xin14 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin14 <= xout13;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline13_1_process
      if (reset == 1'b1) begin
        yin14 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin14 <= yout13;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline13_2_process
      if (reset == 1'b1) begin
        zin14 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin14 <= zout13;
        end
      end
    end



  assign lut_value14 = 23'b00000000000001000000000;



  assign shift14 = 6'b001110;



  CordicKernelMag u_Iteration_13 (.xin(xin14),  /* sfix24 */
                                  .yin(yin14),  /* sfix24 */
                                  .zin(zin14),  /* sfix24_En23 */
                                  .lut_value(lut_value14),  /* ufix23_En23 */
                                  .idx(shift14),  /* ufix6 */
                                  .xout(xout14),  /* sfix24 */
                                  .yout(yout14),  /* sfix24 */
                                  .zout(zout14)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline14_process
      if (reset == 1'b1) begin
        xin15 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin15 <= xout14;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline14_1_process
      if (reset == 1'b1) begin
        yin15 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin15 <= yout14;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline14_2_process
      if (reset == 1'b1) begin
        zin15 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin15 <= zout14;
        end
      end
    end



  assign lut_value15 = 23'b00000000000000100000000;



  assign shift15 = 6'b001111;



  CordicKernelMag u_Iteration_14 (.xin(xin15),  /* sfix24 */
                                  .yin(yin15),  /* sfix24 */
                                  .zin(zin15),  /* sfix24_En23 */
                                  .lut_value(lut_value15),  /* ufix23_En23 */
                                  .idx(shift15),  /* ufix6 */
                                  .xout(xout15),  /* sfix24 */
                                  .yout(yout15),  /* sfix24 */
                                  .zout(zout15)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline15_process
      if (reset == 1'b1) begin
        xin16 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin16 <= xout15;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline15_1_process
      if (reset == 1'b1) begin
        yin16 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin16 <= yout15;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline15_2_process
      if (reset == 1'b1) begin
        zin16 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin16 <= zout15;
        end
      end
    end



  assign lut_value16 = 23'b00000000000000010000000;



  assign shift16 = 6'b010000;



  CordicKernelMag u_Iteration_15 (.xin(xin16),  /* sfix24 */
                                  .yin(yin16),  /* sfix24 */
                                  .zin(zin16),  /* sfix24_En23 */
                                  .lut_value(lut_value16),  /* ufix23_En23 */
                                  .idx(shift16),  /* ufix6 */
                                  .xout(xout16),  /* sfix24 */
                                  .yout(yout16),  /* sfix24 */
                                  .zout(zout16)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline16_process
      if (reset == 1'b1) begin
        xin17 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin17 <= xout16;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline16_1_process
      if (reset == 1'b1) begin
        yin17 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin17 <= yout16;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline16_2_process
      if (reset == 1'b1) begin
        zin17 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin17 <= zout16;
        end
      end
    end



  assign lut_value17 = 23'b00000000000000001000000;



  assign shift17 = 6'b010001;



  CordicKernelMag u_Iteration_16 (.xin(xin17),  /* sfix24 */
                                  .yin(yin17),  /* sfix24 */
                                  .zin(zin17),  /* sfix24_En23 */
                                  .lut_value(lut_value17),  /* ufix23_En23 */
                                  .idx(shift17),  /* ufix6 */
                                  .xout(xout17),  /* sfix24 */
                                  .yout(yout17),  /* sfix24 */
                                  .zout(zout17)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline17_process
      if (reset == 1'b1) begin
        xin18 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin18 <= xout17;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline17_1_process
      if (reset == 1'b1) begin
        yin18 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin18 <= yout17;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline17_2_process
      if (reset == 1'b1) begin
        zin18 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin18 <= zout17;
        end
      end
    end



  assign lut_value18 = 23'b00000000000000000100000;



  assign shift18 = 6'b010010;



  CordicKernelMag u_Iteration_17 (.xin(xin18),  /* sfix24 */
                                  .yin(yin18),  /* sfix24 */
                                  .zin(zin18),  /* sfix24_En23 */
                                  .lut_value(lut_value18),  /* ufix23_En23 */
                                  .idx(shift18),  /* ufix6 */
                                  .xout(xout18),  /* sfix24 */
                                  .yout(yout18),  /* sfix24 */
                                  .zout(zout18)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline18_process
      if (reset == 1'b1) begin
        xin19 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin19 <= xout18;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline18_1_process
      if (reset == 1'b1) begin
        yin19 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin19 <= yout18;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline18_2_process
      if (reset == 1'b1) begin
        zin19 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin19 <= zout18;
        end
      end
    end



  assign lut_value19 = 23'b00000000000000000010000;



  assign shift19 = 6'b010011;



  CordicKernelMag u_Iteration_18 (.xin(xin19),  /* sfix24 */
                                  .yin(yin19),  /* sfix24 */
                                  .zin(zin19),  /* sfix24_En23 */
                                  .lut_value(lut_value19),  /* ufix23_En23 */
                                  .idx(shift19),  /* ufix6 */
                                  .xout(xout19),  /* sfix24 */
                                  .yout(yout19),  /* sfix24 */
                                  .zout(zout19)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline19_process
      if (reset == 1'b1) begin
        xin20 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin20 <= xout19;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline19_1_process
      if (reset == 1'b1) begin
        yin20 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin20 <= yout19;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline19_2_process
      if (reset == 1'b1) begin
        zin20 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin20 <= zout19;
        end
      end
    end



  assign lut_value20 = 23'b00000000000000000001000;



  assign shift20 = 6'b010100;



  CordicKernelMag u_Iteration_19 (.xin(xin20),  /* sfix24 */
                                  .yin(yin20),  /* sfix24 */
                                  .zin(zin20),  /* sfix24_En23 */
                                  .lut_value(lut_value20),  /* ufix23_En23 */
                                  .idx(shift20),  /* ufix6 */
                                  .xout(xout20),  /* sfix24 */
                                  .yout(yout20),  /* sfix24 */
                                  .zout(zout20)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline20_process
      if (reset == 1'b1) begin
        xin21 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin21 <= xout20;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline20_1_process
      if (reset == 1'b1) begin
        yin21 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin21 <= yout20;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline20_2_process
      if (reset == 1'b1) begin
        zin21 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin21 <= zout20;
        end
      end
    end



  assign lut_value21 = 23'b00000000000000000000100;



  assign shift21 = 6'b010101;



  CordicKernelMag u_Iteration_20 (.xin(xin21),  /* sfix24 */
                                  .yin(yin21),  /* sfix24 */
                                  .zin(zin21),  /* sfix24_En23 */
                                  .lut_value(lut_value21),  /* ufix23_En23 */
                                  .idx(shift21),  /* ufix6 */
                                  .xout(xout21),  /* sfix24 */
                                  .yout(yout21),  /* sfix24 */
                                  .zout(zout21)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline21_process
      if (reset == 1'b1) begin
        xin22 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin22 <= xout21;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline21_1_process
      if (reset == 1'b1) begin
        yin22 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          yin22 <= yout21;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : Pipeline21_2_process
      if (reset == 1'b1) begin
        zin22 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin22 <= zout21;
        end
      end
    end



  assign lut_value22 = 23'b00000000000000000000010;



  assign shift22 = 6'b010110;



  CordicKernelMag u_Iteration_21 (.xin(xin22),  /* sfix24 */
                                  .yin(yin22),  /* sfix24 */
                                  .zin(zin22),  /* sfix24_En23 */
                                  .lut_value(lut_value22),  /* ufix23_En23 */
                                  .idx(shift22),  /* ufix6 */
                                  .xout(xout22),  /* sfix24 */
                                  .yout(yout22),  /* sfix24 */
                                  .zout(zout22)  /* sfix24_En23 */
                                  );

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline22_process
      if (reset == 1'b1) begin
        xin23 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin23 <= xout22;
        end
      end
    end



  // CSD Encoding (28141) : 1001'001'00001'01'01; Cost (Adders) = 5
  assign CSD_Gain_Factor_mul_temp = (((($signed({xin23, 15'b000000000000000}) - $signed({xin23, 12'b000000000000})) - $signed({xin23, 9'b000000000})) - $signed({xin23, 4'b0000})) - $signed({xin23, 2'b00})) + xin23;
  assign CSD_Gain_Factor_cast = CSD_Gain_Factor_mul_temp[38:0];
  assign xoutscaled = CSD_Gain_Factor_cast[38:15];



  assign zeroC = 24'sb000000000000000000000000;



  assign outSwitchMag = (reset_outval == 1'b0 ? xoutscaled :
              zeroC);



  always_ff @(posedge clk or posedge reset)
    begin : Output_Register_process
      if (reset == 1'b1) begin
        xin24 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          xin24 <= outSwitchMag;
        end
      end
    end



  assign magnitude = xin24;

  always_ff @(posedge clk or posedge reset)
    begin : Pipeline22_1_process
      if (reset == 1'b1) begin
        zin23 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          zin23 <= zout22;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : DelayQC_Control_process
      if (reset == 1'b1) begin
        DelayQC_Control_reg <= '{23{5'b00000}};
      end
      else begin
        if (enb) begin
          DelayQC_Control_reg[0] <= ControlQC;
          DelayQC_Control_reg[32'sd1:32'sd22] <= DelayQC_Control_reg[32'sd0:32'sd21];
        end
      end
    end

  assign ControlQCDelay = DelayQC_Control_reg[22];



  Quadrant_Correction u_QuadrantCorrection (.zin(zin23),  /* sfix24_En23 */
                                            .QA_Control(ControlQCDelay),  /* ufix5 */
                                            .zout(zout_corrected)  /* sfix26_En23 */
                                            );

  assign zeroCA = 26'sb00000000000000000000000000;



  assign outSwitchAng = (reset_outval == 1'b0 ? zout_corrected :
              zeroCA);



  always_ff @(posedge clk or posedge reset)
    begin : Output_Register_1_process
      if (reset == 1'b1) begin
        zout_corrected_1 <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          zout_corrected_1 <= outSwitchAng;
        end
      end
    end



  assign angle = zout_corrected_1;

  always_ff @(posedge clk or posedge reset)
    begin : DelayValidOut_process
      if (reset == 1'b1) begin
        validOut_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          validOut_1 <= ValidOutDelayed;
        end
      end
    end



  assign validOut = validOut_1;

endmodule  // HDL_CMA_core

