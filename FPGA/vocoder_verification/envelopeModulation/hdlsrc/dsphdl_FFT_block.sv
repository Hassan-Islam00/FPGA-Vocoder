// -------------------------------------------------------------
// 
// File Name: C:\Users\Hassa\Documents\GitHub\vocoder\MATLAB\MATLAB_CodeGen\codegen\envelopeModulation\hdlsrc\dsphdl_FFT_block.sv
// Created: 2024-03-28 20:55:44
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// -------------------------------------------------------------


import envelopeModulation_fixpt_pkg::* ;

// -------------------------------------------------------------
// 
// Module: dsphdl_FFT_block
// Source Path: envelopeModulation_fixpt/dsphdl.FFT
// Hierarchy Level: 1
// 
// FFT
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dsphdl_FFT_block
          (  input logic clk,
             input logic reset,
             input logic enb,
             input logic [11:0] dataIn_re  /* ufix12 */,
             input logic [11:0] dataIn_im  /* ufix12 */,
             input logic validIn,
             output logic signed [22:0] dataOut_re  /* sfix23 */,
             output logic signed [22:0] dataOut_im  /* sfix23 */,
             output logic validOut);


  logic softReset;
  logic signed [12:0] dataIn_1_cast_re;  /* sfix13 */
  logic signed [12:0] dataIn_1_cast_im;  /* sfix13 */
  vector_of_signed_logic_13 intdelay_reg [0:2];  /* sfix13 [3] */
  logic signed [12:0] din_1_1_re_dly;  /* sfix13 */
  vector_of_signed_logic_13 intdelay_reg_1 [0:2];  /* sfix13 [3] */
  logic signed [12:0] din_1_1_im_dly;  /* sfix13 */
  logic [2:0] intdelay_reg_2;  /* ufix1 [3] */
  logic din_1_vld_dly;
  logic signed [12:0] twdl_1_1_re;  /* sfix13_En11 */
  logic signed [12:0] twdl_1_1_im;  /* sfix13_En11 */
  logic [2:0] intdelay_reg_3;  /* ufix1 [3] */
  logic twdl_1_1_vld;
  logic dinXTwdl_1_1_vld;
  logic [8:0] rd_1_Addr;  /* ufix9 */
  logic rd_1_Enb;
  logic proc_1_enb;
  logic multiply_1_J;
  logic signed [13:0] dout_1_1_re;  /* sfix14 */
  logic signed [13:0] dout_1_1_im;  /* sfix14 */
  logic dout_1_1_vld;
  logic dinXTwdl_2_1_vld;
  logic [7:0] rd_2_Addr;  /* ufix8 */
  logic rd_2_Enb;
  logic proc_2_enb;
  logic multiply_2_J;
  logic signed [14:0] dout_2_1_re;  /* sfix15 */
  logic signed [14:0] dout_2_1_im;  /* sfix15 */
  logic dout_2_1_vld;
  vector_of_signed_logic_15 intdelay_reg_4 [0:2];  /* sfix15 [3] */
  logic signed [14:0] din_3_1_re_dly;  /* sfix15 */
  vector_of_signed_logic_15 intdelay_reg_5 [0:2];  /* sfix15 [3] */
  logic signed [14:0] din_3_1_im_dly;  /* sfix15 */
  logic [2:0] intdelay_reg_6;  /* ufix1 [3] */
  logic din_3_vld_dly;
  logic signed [12:0] twdl_3_1_re;  /* sfix13_En11 */
  logic signed [12:0] twdl_3_1_im;  /* sfix13_En11 */
  logic twdl_3_1_vld;
  logic dinXTwdl_3_1_vld;
  logic [6:0] rd_3_Addr;  /* ufix7 */
  logic rd_3_Enb;
  logic proc_3_enb;
  logic multiply_3_J;
  logic signed [15:0] dout_3_1_re;  /* sfix16 */
  logic signed [15:0] dout_3_1_im;  /* sfix16 */
  logic dout_3_1_vld;
  logic dinXTwdl_4_1_vld;
  logic [5:0] rd_4_Addr;  /* ufix6 */
  logic rd_4_Enb;
  logic proc_4_enb;
  logic multiply_4_J;
  logic signed [16:0] dout_4_1_re;  /* sfix17 */
  logic signed [16:0] dout_4_1_im;  /* sfix17 */
  logic dout_4_1_vld;
  vector_of_signed_logic_17 intdelay_reg_7 [0:2];  /* sfix17 [3] */
  logic signed [16:0] din_5_1_re_dly;  /* sfix17 */
  vector_of_signed_logic_17 intdelay_reg_8 [0:2];  /* sfix17 [3] */
  logic signed [16:0] din_5_1_im_dly;  /* sfix17 */
  logic [2:0] intdelay_reg_9;  /* ufix1 [3] */
  logic din_5_vld_dly;
  logic signed [12:0] twdl_5_1_re;  /* sfix13_En11 */
  logic signed [12:0] twdl_5_1_im;  /* sfix13_En11 */
  logic twdl_5_1_vld;
  logic dinXTwdl_5_1_vld;
  logic [4:0] rd_5_Addr;  /* ufix5 */
  logic rd_5_Enb;
  logic proc_5_enb;
  logic multiply_5_J;
  logic signed [17:0] dout_5_1_re;  /* sfix18 */
  logic signed [17:0] dout_5_1_im;  /* sfix18 */
  logic dout_5_1_vld;
  logic dinXTwdl_6_1_vld;
  logic [3:0] rd_6_Addr;  /* ufix4 */
  logic rd_6_Enb;
  logic proc_6_enb;
  logic multiply_6_J;
  logic signed [18:0] dout_6_1_re;  /* sfix19 */
  logic signed [18:0] dout_6_1_im;  /* sfix19 */
  logic dout_6_1_vld;
  vector_of_signed_logic_19 intdelay_reg_10 [0:2];  /* sfix19 [3] */
  logic signed [18:0] din_7_1_re_dly;  /* sfix19 */
  vector_of_signed_logic_19 intdelay_reg_11 [0:2];  /* sfix19 [3] */
  logic signed [18:0] din_7_1_im_dly;  /* sfix19 */
  logic [2:0] intdelay_reg_12;  /* ufix1 [3] */
  logic din_7_vld_dly;
  logic signed [12:0] twdl_7_1_re;  /* sfix13_En11 */
  logic signed [12:0] twdl_7_1_im;  /* sfix13_En11 */
  logic twdl_7_1_vld;
  logic dinXTwdl_7_1_vld;
  logic [2:0] rd_7_Addr;  /* ufix3 */
  logic rd_7_Enb;
  logic proc_7_enb;
  logic multiply_7_J;
  logic signed [19:0] dout_7_1_re;  /* sfix20 */
  logic signed [19:0] dout_7_1_im;  /* sfix20 */
  logic dout_7_1_vld;
  logic dinXTwdl_8_1_vld;
  logic [1:0] rd_8_Addr;  /* ufix2 */
  logic rd_8_Enb;
  logic proc_8_enb;
  logic multiply_8_J;
  logic signed [20:0] dout_8_1_re;  /* sfix21 */
  logic signed [20:0] dout_8_1_im;  /* sfix21 */
  logic dout_8_1_vld;
  vector_of_signed_logic_21 intdelay_reg_13 [0:2];  /* sfix21 [3] */
  logic signed [20:0] din_9_1_re_dly;  /* sfix21 */
  vector_of_signed_logic_21 intdelay_reg_14 [0:2];  /* sfix21 [3] */
  logic signed [20:0] din_9_1_im_dly;  /* sfix21 */
  logic [2:0] intdelay_reg_15;  /* ufix1 [3] */
  logic din_9_vld_dly;
  logic signed [12:0] twdl_9_1_re;  /* sfix13_En11 */
  logic signed [12:0] twdl_9_1_im;  /* sfix13_En11 */
  logic twdl_9_1_vld;
  logic dinXTwdl_9_1_vld;
  logic rd_9_Addr;  /* ufix1 */
  logic rd_9_Enb;
  logic proc_9_enb;
  logic multiply_9_J;
  logic signed [21:0] dout_9_1_re;  /* sfix22 */
  logic signed [21:0] dout_9_1_im;  /* sfix22 */
  logic dout_9_1_vld;
  logic dinXTwdl_10_1_vld;
  logic rd_10_Addr;
  logic rd_10_Enb;
  logic proc_10_enb;
  logic multiply_10_J;
  logic signed [22:0] dout_10_1_re;  /* sfix23 */
  logic signed [22:0] dout_10_1_im;  /* sfix23 */
  logic dout_10_1_vld;
  logic signed [22:0] dout_re1;  /* sfix23 */
  logic signed [22:0] dout_im1;  /* sfix23 */
  logic dout_vld1;


  assign softReset = 1'b0;



  assign dataIn_1_cast_re = {1'b0, dataIn_re};
  assign dataIn_1_cast_im = {1'b0, dataIn_im};



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg <= '{3{13'sb0000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg <= '{3{13'sb0000000000000}};
          end
          else begin
            intdelay_reg[0] <= dataIn_1_cast_re;
            intdelay_reg[32'sd1:32'sd2] <= intdelay_reg[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_1_1_re_dly = intdelay_reg[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        intdelay_reg_1 <= '{3{13'sb0000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_1 <= '{3{13'sb0000000000000}};
          end
          else begin
            intdelay_reg_1[0] <= dataIn_1_cast_im;
            intdelay_reg_1[32'sd1:32'sd2] <= intdelay_reg_1[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_1_1_im_dly = intdelay_reg_1[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2 <= '{3{1'b0}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_2 <= '{3{1'b0}};
          end
          else begin
            intdelay_reg_2[0] <= validIn;
            intdelay_reg_2[32'sd2:32'sd1] <= intdelay_reg_2[32'sd1:32'sd0];
          end
        end
      end
    end

  assign din_1_vld_dly = intdelay_reg_2[2];



  assign twdl_1_1_re = 13'sb0100000000000;



  assign twdl_1_1_im = 13'sb0000000000000;



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        intdelay_reg_3 <= '{3{1'b0}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_3 <= '{3{1'b0}};
          end
          else begin
            intdelay_reg_3[0] <= validIn;
            intdelay_reg_3[32'sd2:32'sd1] <= intdelay_reg_3[32'sd1:32'sd0];
          end
        end
      end
    end

  assign twdl_1_1_vld = intdelay_reg_3[2];



  RADIX22FFT_CTRL1_1_block1 u_CTRL1_1_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld),
                                         .dinXTwdl_1_1_vld_1(dinXTwdl_1_1_vld),
                                         .softReset(softReset),
                                         .rd_1_Addr(rd_1_Addr),  /* ufix9 */
                                         .rd_1_Enb(rd_1_Enb),
                                         .proc_1_enb(proc_1_enb),
                                         .multiply_1_J(multiply_1_J)
                                         );

  RADIX22FFT_SDF1_1_block1 u_SDF1_1_1 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .din_1_1_re_dly(din_1_1_re_dly),  /* sfix13 */
                                       .din_1_1_im_dly(din_1_1_im_dly),  /* sfix13 */
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),  /* ufix9 */
                                       .rd_1_Enb(rd_1_Enb),
                                       .twdl_1_1_re(twdl_1_1_re),  /* sfix13_En11 */
                                       .twdl_1_1_im(twdl_1_1_im),  /* sfix13_En11 */
                                       .twdl_1_1_vld(twdl_1_1_vld),
                                       .proc_1_enb(proc_1_enb),
                                       .softReset(softReset),
                                       .dout_1_1_re(dout_1_1_re),  /* sfix14 */
                                       .dout_1_1_im(dout_1_1_im),  /* sfix14 */
                                       .dout_1_1_vld(dout_1_1_vld),
                                       .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld)
                                       );

  RADIX22FFT_CTRL1_2_block1 u_CTRL2_2_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dout_1_1_vld(dout_1_1_vld),
                                         .dinXTwdl_2_1_vld(dinXTwdl_2_1_vld),
                                         .softReset(softReset),
                                         .rd_2_Addr(rd_2_Addr),  /* ufix8 */
                                         .rd_2_Enb(rd_2_Enb),
                                         .proc_2_enb(proc_2_enb),
                                         .multiply_2_J(multiply_2_J)
                                         );

  RADIX22FFT_SDF2_2_block1 u_SDF2_2_1 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .dout_1_1_re(dout_1_1_re),  /* sfix14 */
                                       .dout_1_1_im(dout_1_1_im),  /* sfix14 */
                                       .dout_1_1_vld(dout_1_1_vld),
                                       .rd_2_Addr(rd_2_Addr),  /* ufix8 */
                                       .rd_2_Enb(rd_2_Enb),
                                       .proc_2_enb(proc_2_enb),
                                       .multiply_2_J(multiply_2_J),
                                       .softReset(softReset),
                                       .dout_2_1_re(dout_2_1_re),  /* sfix15 */
                                       .dout_2_1_im(dout_2_1_im),  /* sfix15 */
                                       .dout_2_1_vld(dout_2_1_vld),
                                       .dinXTwdl_2_1_vld(dinXTwdl_2_1_vld)
                                       );

  always_ff @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        intdelay_reg_4 <= '{3{15'sb000000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_4 <= '{3{15'sb000000000000000}};
          end
          else begin
            intdelay_reg_4[0] <= dout_2_1_re;
            intdelay_reg_4[32'sd1:32'sd2] <= intdelay_reg_4[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_3_1_re_dly = intdelay_reg_4[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        intdelay_reg_5 <= '{3{15'sb000000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_5 <= '{3{15'sb000000000000000}};
          end
          else begin
            intdelay_reg_5[0] <= dout_2_1_im;
            intdelay_reg_5[32'sd1:32'sd2] <= intdelay_reg_5[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_3_1_im_dly = intdelay_reg_5[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        intdelay_reg_6 <= '{3{1'b0}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_6 <= '{3{1'b0}};
          end
          else begin
            intdelay_reg_6[0] <= dout_2_1_vld;
            intdelay_reg_6[32'sd2:32'sd1] <= intdelay_reg_6[32'sd1:32'sd0];
          end
        end
      end
    end

  assign din_3_vld_dly = intdelay_reg_6[2];



  TWDLROM_3_1_block1 u_twdlROM_3_1 (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .dout_2_1_vld(dout_2_1_vld),
                                    .softReset(softReset),
                                    .twdl_3_1_re(twdl_3_1_re),  /* sfix13_En11 */
                                    .twdl_3_1_im(twdl_3_1_im),  /* sfix13_En11 */
                                    .twdl_3_1_vld(twdl_3_1_vld)
                                    );

  RADIX22FFT_CTRL1_3_block1 u_CTRL1_3_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dinXTwdl_3_1_vld(dinXTwdl_3_1_vld),
                                         .dinXTwdl_3_1_vld_1(dinXTwdl_3_1_vld),
                                         .softReset(softReset),
                                         .rd_3_Addr(rd_3_Addr),  /* ufix7 */
                                         .rd_3_Enb(rd_3_Enb),
                                         .proc_3_enb(proc_3_enb),
                                         .multiply_3_J(multiply_3_J)
                                         );

  RADIX22FFT_SDF1_3_block1 u_SDF1_3_1 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .din_3_1_re_dly(din_3_1_re_dly),  /* sfix15 */
                                       .din_3_1_im_dly(din_3_1_im_dly),  /* sfix15 */
                                       .din_3_vld_dly(din_3_vld_dly),
                                       .rd_3_Addr(rd_3_Addr),  /* ufix7 */
                                       .rd_3_Enb(rd_3_Enb),
                                       .twdl_3_1_re(twdl_3_1_re),  /* sfix13_En11 */
                                       .twdl_3_1_im(twdl_3_1_im),  /* sfix13_En11 */
                                       .twdl_3_1_vld(twdl_3_1_vld),
                                       .proc_3_enb(proc_3_enb),
                                       .softReset(softReset),
                                       .dout_3_1_re(dout_3_1_re),  /* sfix16 */
                                       .dout_3_1_im(dout_3_1_im),  /* sfix16 */
                                       .dout_3_1_vld(dout_3_1_vld),
                                       .dinXTwdl_3_1_vld(dinXTwdl_3_1_vld)
                                       );

  RADIX22FFT_CTRL1_4_block1 u_CTRL2_4_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dout_3_1_vld(dout_3_1_vld),
                                         .dinXTwdl_4_1_vld(dinXTwdl_4_1_vld),
                                         .softReset(softReset),
                                         .rd_4_Addr(rd_4_Addr),  /* ufix6 */
                                         .rd_4_Enb(rd_4_Enb),
                                         .proc_4_enb(proc_4_enb),
                                         .multiply_4_J(multiply_4_J)
                                         );

  RADIX22FFT_SDF2_4_block1 u_SDF2_4_1 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .dout_3_1_re(dout_3_1_re),  /* sfix16 */
                                       .dout_3_1_im(dout_3_1_im),  /* sfix16 */
                                       .dout_3_1_vld(dout_3_1_vld),
                                       .rd_4_Addr(rd_4_Addr),  /* ufix6 */
                                       .rd_4_Enb(rd_4_Enb),
                                       .proc_4_enb(proc_4_enb),
                                       .multiply_4_J(multiply_4_J),
                                       .softReset(softReset),
                                       .dout_4_1_re(dout_4_1_re),  /* sfix17 */
                                       .dout_4_1_im(dout_4_1_im),  /* sfix17 */
                                       .dout_4_1_vld(dout_4_1_vld),
                                       .dinXTwdl_4_1_vld(dinXTwdl_4_1_vld)
                                       );

  always_ff @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        intdelay_reg_7 <= '{3{17'sb00000000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_7 <= '{3{17'sb00000000000000000}};
          end
          else begin
            intdelay_reg_7[0] <= dout_4_1_re;
            intdelay_reg_7[32'sd1:32'sd2] <= intdelay_reg_7[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_5_1_re_dly = intdelay_reg_7[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        intdelay_reg_8 <= '{3{17'sb00000000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_8 <= '{3{17'sb00000000000000000}};
          end
          else begin
            intdelay_reg_8[0] <= dout_4_1_im;
            intdelay_reg_8[32'sd1:32'sd2] <= intdelay_reg_8[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_5_1_im_dly = intdelay_reg_8[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        intdelay_reg_9 <= '{3{1'b0}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_9 <= '{3{1'b0}};
          end
          else begin
            intdelay_reg_9[0] <= dout_4_1_vld;
            intdelay_reg_9[32'sd2:32'sd1] <= intdelay_reg_9[32'sd1:32'sd0];
          end
        end
      end
    end

  assign din_5_vld_dly = intdelay_reg_9[2];



  TWDLROM_5_1_block1 u_twdlROM_5_1 (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .dout_4_1_vld(dout_4_1_vld),
                                    .softReset(softReset),
                                    .twdl_5_1_re(twdl_5_1_re),  /* sfix13_En11 */
                                    .twdl_5_1_im(twdl_5_1_im),  /* sfix13_En11 */
                                    .twdl_5_1_vld(twdl_5_1_vld)
                                    );

  RADIX22FFT_CTRL1_5_block1 u_CTRL1_5_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dinXTwdl_5_1_vld(dinXTwdl_5_1_vld),
                                         .dinXTwdl_5_1_vld_1(dinXTwdl_5_1_vld),
                                         .softReset(softReset),
                                         .rd_5_Addr(rd_5_Addr),  /* ufix5 */
                                         .rd_5_Enb(rd_5_Enb),
                                         .proc_5_enb(proc_5_enb),
                                         .multiply_5_J(multiply_5_J)
                                         );

  RADIX22FFT_SDF1_5_block1 u_SDF1_5_1 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .din_5_1_re_dly(din_5_1_re_dly),  /* sfix17 */
                                       .din_5_1_im_dly(din_5_1_im_dly),  /* sfix17 */
                                       .din_5_vld_dly(din_5_vld_dly),
                                       .rd_5_Addr(rd_5_Addr),  /* ufix5 */
                                       .rd_5_Enb(rd_5_Enb),
                                       .twdl_5_1_re(twdl_5_1_re),  /* sfix13_En11 */
                                       .twdl_5_1_im(twdl_5_1_im),  /* sfix13_En11 */
                                       .twdl_5_1_vld(twdl_5_1_vld),
                                       .proc_5_enb(proc_5_enb),
                                       .softReset(softReset),
                                       .dout_5_1_re(dout_5_1_re),  /* sfix18 */
                                       .dout_5_1_im(dout_5_1_im),  /* sfix18 */
                                       .dout_5_1_vld(dout_5_1_vld),
                                       .dinXTwdl_5_1_vld(dinXTwdl_5_1_vld)
                                       );

  RADIX22FFT_CTRL1_6_block1 u_CTRL2_6_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dout_5_1_vld(dout_5_1_vld),
                                         .dinXTwdl_6_1_vld(dinXTwdl_6_1_vld),
                                         .softReset(softReset),
                                         .rd_6_Addr(rd_6_Addr),  /* ufix4 */
                                         .rd_6_Enb(rd_6_Enb),
                                         .proc_6_enb(proc_6_enb),
                                         .multiply_6_J(multiply_6_J)
                                         );

  RADIX22FFT_SDF2_6_block1 u_SDF2_6_1 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .dout_5_1_re(dout_5_1_re),  /* sfix18 */
                                       .dout_5_1_im(dout_5_1_im),  /* sfix18 */
                                       .dout_5_1_vld(dout_5_1_vld),
                                       .rd_6_Addr(rd_6_Addr),  /* ufix4 */
                                       .rd_6_Enb(rd_6_Enb),
                                       .proc_6_enb(proc_6_enb),
                                       .multiply_6_J(multiply_6_J),
                                       .softReset(softReset),
                                       .dout_6_1_re(dout_6_1_re),  /* sfix19 */
                                       .dout_6_1_im(dout_6_1_im),  /* sfix19 */
                                       .dout_6_1_vld(dout_6_1_vld),
                                       .dinXTwdl_6_1_vld(dinXTwdl_6_1_vld)
                                       );

  always_ff @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        intdelay_reg_10 <= '{3{19'sb0000000000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_10 <= '{3{19'sb0000000000000000000}};
          end
          else begin
            intdelay_reg_10[0] <= dout_6_1_re;
            intdelay_reg_10[32'sd1:32'sd2] <= intdelay_reg_10[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_7_1_re_dly = intdelay_reg_10[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        intdelay_reg_11 <= '{3{19'sb0000000000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_11 <= '{3{19'sb0000000000000000000}};
          end
          else begin
            intdelay_reg_11[0] <= dout_6_1_im;
            intdelay_reg_11[32'sd1:32'sd2] <= intdelay_reg_11[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_7_1_im_dly = intdelay_reg_11[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        intdelay_reg_12 <= '{3{1'b0}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_12 <= '{3{1'b0}};
          end
          else begin
            intdelay_reg_12[0] <= dout_6_1_vld;
            intdelay_reg_12[32'sd2:32'sd1] <= intdelay_reg_12[32'sd1:32'sd0];
          end
        end
      end
    end

  assign din_7_vld_dly = intdelay_reg_12[2];



  TWDLROM_7_1_block1 u_twdlROM_7_1 (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .dout_6_1_vld(dout_6_1_vld),
                                    .softReset(softReset),
                                    .twdl_7_1_re(twdl_7_1_re),  /* sfix13_En11 */
                                    .twdl_7_1_im(twdl_7_1_im),  /* sfix13_En11 */
                                    .twdl_7_1_vld(twdl_7_1_vld)
                                    );

  RADIX22FFT_CTRL1_7_block1 u_CTRL1_7_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dinXTwdl_7_1_vld(dinXTwdl_7_1_vld),
                                         .dinXTwdl_7_1_vld_1(dinXTwdl_7_1_vld),
                                         .softReset(softReset),
                                         .rd_7_Addr(rd_7_Addr),  /* ufix3 */
                                         .rd_7_Enb(rd_7_Enb),
                                         .proc_7_enb(proc_7_enb),
                                         .multiply_7_J(multiply_7_J)
                                         );

  RADIX22FFT_SDF1_7_block1 u_SDF1_7_1 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .din_7_1_re_dly(din_7_1_re_dly),  /* sfix19 */
                                       .din_7_1_im_dly(din_7_1_im_dly),  /* sfix19 */
                                       .din_7_vld_dly(din_7_vld_dly),
                                       .rd_7_Addr(rd_7_Addr),  /* ufix3 */
                                       .rd_7_Enb(rd_7_Enb),
                                       .twdl_7_1_re(twdl_7_1_re),  /* sfix13_En11 */
                                       .twdl_7_1_im(twdl_7_1_im),  /* sfix13_En11 */
                                       .twdl_7_1_vld(twdl_7_1_vld),
                                       .proc_7_enb(proc_7_enb),
                                       .softReset(softReset),
                                       .dout_7_1_re(dout_7_1_re),  /* sfix20 */
                                       .dout_7_1_im(dout_7_1_im),  /* sfix20 */
                                       .dout_7_1_vld(dout_7_1_vld),
                                       .dinXTwdl_7_1_vld(dinXTwdl_7_1_vld)
                                       );

  RADIX22FFT_CTRL1_8_block1 u_CTRL2_8_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dout_7_1_vld(dout_7_1_vld),
                                         .dinXTwdl_8_1_vld(dinXTwdl_8_1_vld),
                                         .softReset(softReset),
                                         .rd_8_Addr(rd_8_Addr),  /* ufix2 */
                                         .rd_8_Enb(rd_8_Enb),
                                         .proc_8_enb(proc_8_enb),
                                         .multiply_8_J(multiply_8_J)
                                         );

  RADIX22FFT_SDF2_8_block1 u_SDF2_8_1 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .dout_7_1_re(dout_7_1_re),  /* sfix20 */
                                       .dout_7_1_im(dout_7_1_im),  /* sfix20 */
                                       .dout_7_1_vld(dout_7_1_vld),
                                       .rd_8_Addr(rd_8_Addr),  /* ufix2 */
                                       .rd_8_Enb(rd_8_Enb),
                                       .proc_8_enb(proc_8_enb),
                                       .multiply_8_J(multiply_8_J),
                                       .softReset(softReset),
                                       .dout_8_1_re(dout_8_1_re),  /* sfix21 */
                                       .dout_8_1_im(dout_8_1_im),  /* sfix21 */
                                       .dout_8_1_vld(dout_8_1_vld),
                                       .dinXTwdl_8_1_vld(dinXTwdl_8_1_vld)
                                       );

  always_ff @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        intdelay_reg_13 <= '{3{21'sb000000000000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_13 <= '{3{21'sb000000000000000000000}};
          end
          else begin
            intdelay_reg_13[0] <= dout_8_1_re;
            intdelay_reg_13[32'sd1:32'sd2] <= intdelay_reg_13[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_9_1_re_dly = intdelay_reg_13[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        intdelay_reg_14 <= '{3{21'sb000000000000000000000}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_14 <= '{3{21'sb000000000000000000000}};
          end
          else begin
            intdelay_reg_14[0] <= dout_8_1_im;
            intdelay_reg_14[32'sd1:32'sd2] <= intdelay_reg_14[32'sd0:32'sd1];
          end
        end
      end
    end

  assign din_9_1_im_dly = intdelay_reg_14[2];



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        intdelay_reg_15 <= '{3{1'b0}};
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            intdelay_reg_15 <= '{3{1'b0}};
          end
          else begin
            intdelay_reg_15[0] <= dout_8_1_vld;
            intdelay_reg_15[32'sd2:32'sd1] <= intdelay_reg_15[32'sd1:32'sd0];
          end
        end
      end
    end

  assign din_9_vld_dly = intdelay_reg_15[2];



  TWDLROM_9_1_block1 u_twdlROM_9_1 (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .dout_8_1_vld(dout_8_1_vld),
                                    .softReset(softReset),
                                    .twdl_9_1_re(twdl_9_1_re),  /* sfix13_En11 */
                                    .twdl_9_1_im(twdl_9_1_im),  /* sfix13_En11 */
                                    .twdl_9_1_vld(twdl_9_1_vld)
                                    );

  RADIX22FFT_CTRL1_9_block1 u_CTRL1_9_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dinXTwdl_9_1_vld(dinXTwdl_9_1_vld),
                                         .dinXTwdl_9_1_vld_1(dinXTwdl_9_1_vld),
                                         .softReset(softReset),
                                         .rd_9_Addr(rd_9_Addr),  /* ufix1 */
                                         .rd_9_Enb(rd_9_Enb),
                                         .proc_9_enb(proc_9_enb),
                                         .multiply_9_J(multiply_9_J)
                                         );

  RADIX22FFT_SDF1_9_block1 u_SDF1_9_1 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .din_9_1_re_dly(din_9_1_re_dly),  /* sfix21 */
                                       .din_9_1_im_dly(din_9_1_im_dly),  /* sfix21 */
                                       .din_9_vld_dly(din_9_vld_dly),
                                       .rd_9_Addr(rd_9_Addr),  /* ufix1 */
                                       .rd_9_Enb(rd_9_Enb),
                                       .twdl_9_1_re(twdl_9_1_re),  /* sfix13_En11 */
                                       .twdl_9_1_im(twdl_9_1_im),  /* sfix13_En11 */
                                       .twdl_9_1_vld(twdl_9_1_vld),
                                       .proc_9_enb(proc_9_enb),
                                       .softReset(softReset),
                                       .dout_9_1_re(dout_9_1_re),  /* sfix22 */
                                       .dout_9_1_im(dout_9_1_im),  /* sfix22 */
                                       .dout_9_1_vld(dout_9_1_vld),
                                       .dinXTwdl_9_1_vld(dinXTwdl_9_1_vld)
                                       );

  RADIX22FFT_CTRL1_10_block1 u_CTRL2_10_1 (.clk(clk),
                                           .reset(reset),
                                           .enb(enb),
                                           .dout_9_1_vld(dout_9_1_vld),
                                           .dinXTwdl_10_1_vld(dinXTwdl_10_1_vld),
                                           .softReset(softReset),
                                           .rd_10_Addr(rd_10_Addr),
                                           .rd_10_Enb(rd_10_Enb),
                                           .proc_10_enb(proc_10_enb),
                                           .multiply_10_J(multiply_10_J)
                                           );

  RADIX22FFT_SDF2_10_block1 u_SDF2_10_1 (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .dout_9_1_re(dout_9_1_re),  /* sfix22 */
                                         .dout_9_1_im(dout_9_1_im),  /* sfix22 */
                                         .dout_9_1_vld(dout_9_1_vld),
                                         .rd_10_Addr(rd_10_Addr),
                                         .rd_10_Enb(rd_10_Enb),
                                         .proc_10_enb(proc_10_enb),
                                         .multiply_10_J(multiply_10_J),
                                         .softReset(softReset),
                                         .dout_10_1_re(dout_10_1_re),  /* sfix23 */
                                         .dout_10_1_im(dout_10_1_im),  /* sfix23 */
                                         .dout_10_1_vld(dout_10_1_vld),
                                         .dinXTwdl_10_1_vld(dinXTwdl_10_1_vld)
                                         );

  RADIX2FFT_bitNatural_block u_NaturalOrder_Stage (.clk(clk),
                                                   .reset(reset),
                                                   .enb(enb),
                                                   .dout_10_1_re(dout_10_1_re),  /* sfix23 */
                                                   .dout_10_1_im(dout_10_1_im),  /* sfix23 */
                                                   .dout_10_1_vld(dout_10_1_vld),
                                                   .softReset(softReset),
                                                   .dout_re1(dout_re1),  /* sfix23 */
                                                   .dout_im1(dout_im1),  /* sfix23 */
                                                   .dout_vld1(dout_vld1)
                                                   );

  assign dataOut_re = dout_re1;

  assign dataOut_im = dout_im1;

  assign validOut = dout_vld1;

endmodule  // dsphdl_FFT_block

