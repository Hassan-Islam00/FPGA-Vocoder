// -------------------------------------------------------------
// 
// File Name: C:\Users\Hassa\Documents\GitHub\vocoder\MATLAB\MATLAB_CodeGen\codegen\envelopeModulation\hdlsrc\RADIX22FFT_CTRL1_2_block.sv
// Created: 2024-03-28 20:55:43
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// -------------------------------------------------------------


import envelopeModulation_fixpt_pkg::* ;

// -------------------------------------------------------------
// 
// Module: RADIX22FFT_CTRL1_2_block
// Source Path: envelopeModulation_fixpt/dsphdl.FFT/RADIX22FFT_CTRL1_2
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RADIX22FFT_CTRL1_2_block
          (  input logic clk,
             input logic reset,
             input logic enb,
             input logic dout_1_1_vld,
             input logic dinXTwdl_2_1_vld,
             input logic softReset,
             output logic [7:0] rd_2_Addr  /* ufix8 */,
             output logic rd_2_Enb,
             output logic proc_2_enb,
             output logic multiply_2_J);


  logic [7:0] SDFController_wrCount;  /* ufix8 */
  logic [1:0] SDFController_wrState;  /* ufix2 */
  logic [1:0] SDFController_rdState;  /* ufix2 */
  logic [7:0] SDFController_rdAddr_reg;  /* ufix8 */
  logic SDFController_procEnb_reg;
  logic [1:0] SDFController_multjState;  /* ufix2 */
  logic SDFController_multiply_J_reg;
  logic [7:0] SDFController_wrCount_next;  /* ufix8 */
  logic [1:0] SDFController_wrState_next;  /* ufix2 */
  logic [1:0] SDFController_rdState_next;  /* ufix2 */
  logic [7:0] SDFController_rdAddr_reg_next;  /* ufix8 */
  logic SDFController_procEnb_reg_next;
  logic [1:0] SDFController_multjState_next;  /* ufix2 */
  logic SDFController_multiply_J_reg_next;
  logic [7:0] rd_2_Addr_1;  /* ufix8 */
  logic rd_2_Enb_1;
  logic proc_2_enb_1;
  logic multiply_2_J_1;


  // SDFController
  always_ff @(posedge clk or posedge reset)
    begin : SDFController_process
      if (reset == 1'b1) begin
        SDFController_wrCount <= 8'b00000000;
        SDFController_rdAddr_reg <= 8'b00000000;
        SDFController_wrState <= 2'b00;
        SDFController_rdState <= 2'b00;
        SDFController_multjState <= 2'b00;
        SDFController_procEnb_reg <= 1'b0;
        SDFController_multiply_J_reg <= 1'b0;
      end
      else begin
        if (enb) begin
          SDFController_wrCount <= SDFController_wrCount_next;
          SDFController_wrState <= SDFController_wrState_next;
          SDFController_rdState <= SDFController_rdState_next;
          SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
          SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
          SDFController_multjState <= SDFController_multjState_next;
          SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
        end
      end
    end

  always @(SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_2_1_vld, dout_1_1_vld) begin
    SDFController_wrCount_next = SDFController_wrCount;
    SDFController_rdState_next = SDFController_rdState;
    SDFController_rdAddr_reg_next = SDFController_rdAddr_reg;
    SDFController_procEnb_reg_next = SDFController_procEnb_reg;
    SDFController_multjState_next = SDFController_multjState;
    case ( SDFController_multjState)
      2'b00 :
        begin
          SDFController_multjState_next = 2'b00;
          SDFController_multiply_J_reg_next = 1'b0;
          if (SDFController_rdState == 2'b01) begin
            SDFController_multjState_next = 2'b01;
          end
        end
      2'b01 :
        begin
          SDFController_multiply_J_reg_next = 1'b0;
          if (SDFController_rdState == 2'b10) begin
            SDFController_multjState_next = 2'b10;
          end
        end
      2'b10 :
        begin
          SDFController_multiply_J_reg_next = 1'b0;
          if (SDFController_rdState == 2'b01) begin
            SDFController_multjState_next = 2'b11;
            SDFController_multiply_J_reg_next = 1'b1;
          end
        end
      2'b11 :
        begin
          if (SDFController_rdState == 2'b01) begin
            SDFController_multjState_next = 2'b11;
            SDFController_multiply_J_reg_next = 1'b1;
          end
          else begin
            SDFController_multiply_J_reg_next = 1'b0;
            SDFController_multjState_next = 2'b00;
          end
        end
      default :
        begin
          SDFController_multjState_next = 2'b00;
          SDFController_multiply_J_reg_next = 1'b0;
        end
    endcase
    case ( SDFController_rdState)
      2'b00 :
        begin
          SDFController_rdState_next = 2'b00;
          SDFController_rdAddr_reg_next = 8'b00000000;
          rd_2_Enb_1 = 1'b0;
          if (dout_1_1_vld && (SDFController_wrCount == 8'b11111111)) begin
            SDFController_rdState_next = 2'b01;
          end
        end
      2'b01 :
        begin
          SDFController_rdState_next = 2'b01;
          rd_2_Enb_1 = dinXTwdl_2_1_vld;
          if (dinXTwdl_2_1_vld) begin
            if (SDFController_rdAddr_reg == 8'b11111111) begin
              SDFController_rdState_next = 2'b10;
            end
            SDFController_rdAddr_reg_next = SDFController_rdAddr_reg + 8'b00000001;
          end
        end
      2'b10 :
        begin
          rd_2_Enb_1 = 1'b1;
          if (SDFController_rdAddr_reg == 8'b11111111) begin
            if (dout_1_1_vld && (SDFController_wrCount == 8'b11111111)) begin
              SDFController_rdState_next = 2'b01;
            end
            else begin
              SDFController_rdState_next = 2'b00;
            end
          end
          SDFController_rdAddr_reg_next = SDFController_rdAddr_reg + 8'b00000001;
        end
      default :
        begin
          SDFController_rdState_next = 2'b00;
          SDFController_rdAddr_reg_next = 8'b00000000;
          rd_2_Enb_1 = 1'b0;
        end
    endcase
    case ( SDFController_wrState)
      2'b00 :
        begin
          SDFController_wrState_next = 2'b00;
          SDFController_wrCount_next = 8'b00000000;
          SDFController_procEnb_reg_next = 1'b0;
          if (dout_1_1_vld) begin
            SDFController_wrState_next = 2'b01;
            SDFController_wrCount_next = 8'b00000001;
          end
        end
      2'b01 :
        begin
          SDFController_wrState_next = 2'b01;
          SDFController_procEnb_reg_next = 1'b0;
          if (dout_1_1_vld) begin
            if (SDFController_wrCount == 8'b11111111) begin
              SDFController_wrState_next = 2'b10;
              SDFController_procEnb_reg_next = 1'b1;
            end
            else begin
              SDFController_wrState_next = 2'b01;
            end
            SDFController_wrCount_next = SDFController_wrCount + 8'b00000001;
          end
        end
      2'b10 :
        begin
          SDFController_wrState_next = 2'b10;
          if (dout_1_1_vld) begin
            if (SDFController_wrCount == 8'b11111111) begin
              SDFController_wrState_next = 2'b01;
              SDFController_procEnb_reg_next = 1'b0;
            end
            else begin
              SDFController_wrState_next = 2'b10;
              SDFController_procEnb_reg_next = 1'b1;
            end
            SDFController_wrCount_next = SDFController_wrCount + 8'b00000001;
          end
        end
      default :
        begin
          SDFController_wrState_next = 2'b00;
          SDFController_wrCount_next = 8'b11111111;
          SDFController_procEnb_reg_next = 1'b0;
        end
    endcase
    rd_2_Addr_1 = SDFController_rdAddr_reg;
    proc_2_enb_1 = SDFController_procEnb_reg;
    multiply_2_J_1 = SDFController_multiply_J_reg;
  end



  assign rd_2_Addr = rd_2_Addr_1;

  assign rd_2_Enb = rd_2_Enb_1;

  assign proc_2_enb = proc_2_enb_1;

  assign multiply_2_J = multiply_2_J_1;

endmodule  // RADIX22FFT_CTRL1_2_block

