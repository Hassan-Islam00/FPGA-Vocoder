// -------------------------------------------------------------
// 
// File Name: C:\Users\Hassa\Documents\GitHub\vocoder\MATLAB\MATLAB_CodeGen\codegen\envelopeModulation\hdlsrc\Complex4Multiply_block6.sv
// Created: 2024-03-28 20:55:43
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// -------------------------------------------------------------


import envelopeModulation_fixpt_pkg::* ;

// -------------------------------------------------------------
// 
// Module: Complex4Multiply_block6
// Source Path: envelopeModulation_fixpt/dsphdl.FFT/RADIX22FFT_SDF1_9/Complex4Multiply
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Complex4Multiply_block6
          (  input logic clk,
             input logic reset,
             input logic enb,
             input logic signed [21:0] din_re  /* sfix22 */,
             input logic signed [21:0] din_im  /* sfix22 */,
             input logic din_9_vld_dly,
             input logic signed [12:0] twdl_9_1_re  /* sfix13_En11 */,
             input logic signed [12:0] twdl_9_1_im  /* sfix13_En11 */,
             input logic softReset,
             output logic signed [21:0] dinXTwdl_re  /* sfix22 */,
             output logic signed [21:0] dinXTwdl_im  /* sfix22 */,
             output logic dinXTwdl_9_1_vld);


  logic signed [21:0] din_re_reg;  /* sfix22 */
  logic signed [21:0] din_im_reg;  /* sfix22 */
  logic signed [12:0] twdl_re_reg;  /* sfix13_En11 */
  logic signed [12:0] twdl_im_reg;  /* sfix13_En11 */
  logic signed [21:0] Complex4Multiply_din1_re_pipe1;  /* sfix22 */
  logic signed [21:0] Complex4Multiply_din1_im_pipe1;  /* sfix22 */
  logic signed [34:0] Complex4Multiply_mult1_re_pipe1;  /* sfix35 */
  logic signed [34:0] Complex4Multiply_mult2_re_pipe1;  /* sfix35 */
  logic signed [34:0] Complex4Multiply_mult1_im_pipe1;  /* sfix35 */
  logic signed [34:0] Complex4Multiply_mult2_im_pipe1;  /* sfix35 */
  logic signed [12:0] Complex4Multiply_twiddle_re_pipe1;  /* sfix13 */
  logic signed [12:0] Complex4Multiply_twiddle_im_pipe1;  /* sfix13 */
  logic signed [34:0] prod1_re;  /* sfix35_En11 */
  logic signed [34:0] prod1_im;  /* sfix35_En11 */
  logic signed [34:0] prod2_re;  /* sfix35_En11 */
  logic signed [34:0] prod2_im;  /* sfix35_En11 */
  logic din_vld_dly1;
  logic din_vld_dly2;
  logic din_vld_dly3;
  logic prod_vld;
  logic signed [35:0] Complex4Add_multRes_re_reg;  /* sfix36 */
  logic signed [35:0] Complex4Add_multRes_im_reg;  /* sfix36 */
  logic Complex4Add_prod_vld_reg1;
  logic signed [34:0] Complex4Add_prod1_re_reg;  /* sfix35 */
  logic signed [34:0] Complex4Add_prod1_im_reg;  /* sfix35 */
  logic signed [34:0] Complex4Add_prod2_re_reg;  /* sfix35 */
  logic signed [34:0] Complex4Add_prod2_im_reg;  /* sfix35 */
  logic signed [35:0] Complex4Add_multRes_re_reg_next;  /* sfix36_En11 */
  logic signed [35:0] Complex4Add_multRes_im_reg_next;  /* sfix36_En11 */
  logic signed [35:0] Complex4Add_sub_cast;  /* sfix36_En11 */
  logic signed [35:0] Complex4Add_sub_cast_1;  /* sfix36_En11 */
  logic signed [35:0] Complex4Add_add_cast;  /* sfix36_En11 */
  logic signed [35:0] Complex4Add_add_cast_1;  /* sfix36_En11 */
  logic signed [35:0] mulResFP_re;  /* sfix36_En11 */
  logic signed [35:0] mulResFP_im;  /* sfix36_En11 */
  logic dinXTwdl_9_1_vld_1;


  always_ff @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        din_re_reg <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          din_re_reg <= din_re;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        din_im_reg <= 22'sb0000000000000000000000;
      end
      else begin
        if (enb) begin
          din_im_reg <= din_im;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        twdl_re_reg <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          twdl_re_reg <= twdl_9_1_re;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        twdl_im_reg <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          twdl_im_reg <= twdl_9_1_im;
        end
      end
    end



  // Complex4Multiply
  always_ff @(posedge clk)
    begin : Complex4Multiply_process
      if (enb) begin
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        din_vld_dly1 <= 1'b0;
      end
      else begin
        if (enb) begin
          din_vld_dly1 <= din_9_vld_dly;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        din_vld_dly2 <= 1'b0;
      end
      else begin
        if (enb) begin
          din_vld_dly2 <= din_vld_dly1;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        din_vld_dly3 <= 1'b0;
      end
      else begin
        if (enb) begin
          din_vld_dly3 <= din_vld_dly2;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        prod_vld <= 1'b0;
      end
      else begin
        if (enb) begin
          prod_vld <= din_vld_dly3;
        end
      end
    end



  // Complex4Add
  always_ff @(posedge clk or posedge reset)
    begin : Complex4Add_process
      if (reset == 1'b1) begin
        Complex4Add_multRes_re_reg <= 36'sh000000000;
        Complex4Add_multRes_im_reg <= 36'sh000000000;
        Complex4Add_prod1_re_reg <= 35'sh000000000;
        Complex4Add_prod1_im_reg <= 35'sh000000000;
        Complex4Add_prod2_re_reg <= 35'sh000000000;
        Complex4Add_prod2_im_reg <= 35'sh000000000;
        Complex4Add_prod_vld_reg1 <= 1'b0;
        dinXTwdl_9_1_vld_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
          Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
          Complex4Add_prod1_re_reg <= prod1_re;
          Complex4Add_prod1_im_reg <= prod1_im;
          Complex4Add_prod2_re_reg <= prod2_re;
          Complex4Add_prod2_im_reg <= prod2_im;
          dinXTwdl_9_1_vld_1 <= Complex4Add_prod_vld_reg1;
          Complex4Add_prod_vld_reg1 <= prod_vld;
        end
      end
    end

  assign Complex4Add_sub_cast = {Complex4Add_prod1_re_reg[34], Complex4Add_prod1_re_reg};
  assign Complex4Add_sub_cast_1 = {Complex4Add_prod2_re_reg[34], Complex4Add_prod2_re_reg};
  assign Complex4Add_multRes_re_reg_next = Complex4Add_sub_cast - Complex4Add_sub_cast_1;
  assign Complex4Add_add_cast = {Complex4Add_prod1_im_reg[34], Complex4Add_prod1_im_reg};
  assign Complex4Add_add_cast_1 = {Complex4Add_prod2_im_reg[34], Complex4Add_prod2_im_reg};
  assign Complex4Add_multRes_im_reg_next = Complex4Add_add_cast + Complex4Add_add_cast_1;
  assign mulResFP_re = Complex4Add_multRes_re_reg;
  assign mulResFP_im = Complex4Add_multRes_im_reg;



  assign dinXTwdl_re = mulResFP_re[32:11];



  assign dinXTwdl_im = mulResFP_im[32:11];



  assign dinXTwdl_9_1_vld = dinXTwdl_9_1_vld_1;

endmodule  // Complex4Multiply_block6

