// -------------------------------------------------------------
// 
// File Name: C:\Users\Hassa\Documents\GitHub\vocoder\MATLAB\MATLAB_CodeGen\codegen\envelopeModulation\hdlsrc\envelopeModulation_fixpt_tb.sv
// Created: 2024-03-28 20:58:05
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: envelopeModulation_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module envelopeModulation_fixpt_tb;

  logic clk;
  logic reset;
  logic enb;
  logic [11:0] rawData_tMod_im;  /* ufix12 */
  logic [11:0] rawData_tCarr_im;  /* ufix12 */
  logic validOut_done;  /* ufix1 */
  logic rdEnb;
  logic validOut_done_enb;  /* ufix1 */
  logic [12:0] yOut_re_addr;  /* ufix13 */
  logic validOut_lastAddr;  /* ufix1 */
  logic resetn;
  logic check2_done;  /* ufix1 */
  logic yOut_re_done;  /* ufix1 */
  logic yOut_re_done_enb;  /* ufix1 */
  logic yOut_re_active;  /* ufix1 */
  logic [12:0] tMod_addr;  /* ufix13 */
  logic [12:0] validIn_addr_delay_1;  /* ufix13 */
  logic tb_enb;
  logic signed [31:0] fp_validIn;  /* sfix32 */
  logic rawData_validIn;
  logic signed [31:0] status_validIn;  /* sfix32 */
  logic holdData_validIn;
  logic validIn_offset;
  logic validIn;
  logic [11:0] holdData_tCarr_im;  /* ufix12 */
  logic [11:0] tCarr_im_offset;  /* ufix12 */
  logic [11:0] tCarr_im_1;  /* ufix12 */
  logic [12:0] tCarr_addr_delay_1;  /* ufix13 */
  logic signed [31:0] fp_tCarr_re;  /* sfix32 */
  logic [11:0] rawData_tCarr_re;  /* ufix12 */
  logic signed [31:0] status_tCarr_re;  /* sfix32 */
  logic [11:0] holdData_tCarr_re;  /* ufix12 */
  logic [11:0] tCarr_re_offset;  /* ufix12 */
  logic [11:0] tCarr_re;  /* ufix12 */
  logic [11:0] holdData_tMod_im;  /* ufix12 */
  logic [11:0] tMod_im_offset;  /* ufix12 */
  logic [11:0] tMod_im_1;  /* ufix12 */
  logic tMod_active;  /* ufix1 */
  logic tMod_enb;  /* ufix1 */
  logic [12:0] tMod_addr_delay_1;  /* ufix13 */
  logic signed [31:0] fp_tMod_re;  /* sfix32 */
  logic [11:0] rawData_tMod_re;  /* ufix12 */
  logic signed [31:0] status_tMod_re;  /* sfix32 */
  logic [11:0] holdData_tMod_re;  /* ufix12 */
  logic [11:0] tMod_re_offset;  /* ufix12 */
  logic [11:0] tMod_re;  /* ufix12 */
  logic snkDone;
  logic snkDonen;
  logic ce_out;
  logic signed [25:0] yOut_re;  /* sfix26 */
  logic signed [25:0] yOut_im;  /* sfix26 */
  logic validOut;
  logic yOut_re_enb;  /* ufix1 */
  logic yOut_re_lastAddr;  /* ufix1 */
  logic check1_done;  /* ufix1 */
  logic [12:0] yOut_re_addr_delay_1;  /* ufix13 */
  logic signed [31:0] fp_yOut_re_expected;  /* sfix32 */
  logic signed [25:0] yOut_re_expected;  /* sfix26 */
  logic signed [31:0] status_yOut_re_expected;  /* sfix32 */
  logic signed [25:0] yOut_re_ref;  /* sfix26 */
  logic yOut_re_testFailure;  /* ufix1 */
  logic signed [31:0] fp_yOut_im_expected;  /* sfix32 */
  logic signed [25:0] yOut_im_expected;  /* sfix26 */
  logic signed [31:0] status_yOut_im_expected;  /* sfix32 */
  logic signed [25:0] yOut_im_ref;  /* sfix26 */
  logic yOut_im_testFailure;  /* ufix1 */
  logic [12:0] validOut_addr_delay_1;  /* ufix13 */
  logic signed [31:0] fp_validOut_expected;  /* sfix32 */
  logic validOut_expected;
  logic signed [31:0] status_validOut_expected;  /* sfix32 */
  logic validOut_ref;
  logic validOut_testFailure;  /* ufix1 */
  logic testFailure;  /* ufix1 */


  // Data source for tMod_im
  assign rawData_tMod_im = 12'b000000000000;



  // Data source for tCarr_im
  assign rawData_tCarr_im = 12'b000000000000;



  assign validOut_done_enb = validOut_done & rdEnb;



  assign validOut_lastAddr = yOut_re_addr >= 13'b1001111111111;



  assign validOut_done = validOut_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (validOut_done_enb) begin
          check2_done <= validOut_done;
        end
      end
    end

  assign yOut_re_done_enb = yOut_re_done & rdEnb;



  assign yOut_re_active = yOut_re_addr != 13'b1001111111111;



  assign #1 validIn_addr_delay_1 = tMod_addr;

  // Data source for validIn
  initial
    begin : validIn_fileread
      fp_validIn = $fopen("validIn.dat", "r");
      status_validIn = $rewind(fp_validIn);
    end

  always @(validIn_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_validIn <= 1'bx;
      end
      else if (rdEnb == 1) begin
        status_validIn = $fscanf(fp_validIn, "%h", rawData_validIn);
      end
    end

  // holdData reg for validIn
  always @(posedge clk or posedge reset)
    begin : stimuli_validIn
      if (reset) begin
        holdData_validIn <= 1'bx;
      end
      else begin
        holdData_validIn <= rawData_validIn;
      end
    end

  always @(rawData_validIn or rdEnb)
    begin : stimuli_validIn_1
      if (rdEnb == 1'b0) begin
        validIn_offset <= holdData_validIn;
      end
      else begin
        validIn_offset <= rawData_validIn;
      end
    end

  assign #2 validIn = validIn_offset;

  // holdData reg for tCarr
  always @(posedge clk or posedge reset)
    begin : stimuli_tCarr
      if (reset) begin
        holdData_tCarr_im <= 12'bx;
      end
      else begin
        holdData_tCarr_im <= rawData_tCarr_im;
      end
    end

  always @(rawData_tCarr_im or rdEnb)
    begin : stimuli_tCarr_1
      if (rdEnb == 1'b0) begin
        tCarr_im_offset <= holdData_tCarr_im;
      end
      else begin
        tCarr_im_offset <= rawData_tCarr_im;
      end
    end

  assign #2 tCarr_im_1 = tCarr_im_offset;

  assign #1 tCarr_addr_delay_1 = tMod_addr;

  // Data source for tCarr_re
  initial
    begin : tCarr_re_fileread
      fp_tCarr_re = $fopen("tCarr_re.dat", "r");
      status_tCarr_re = $rewind(fp_tCarr_re);
    end

  always @(tCarr_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_tCarr_re <= 12'bx;
      end
      else if (rdEnb == 1) begin
        status_tCarr_re = $fscanf(fp_tCarr_re, "%h", rawData_tCarr_re);
      end
    end

  // holdData reg for tCarr
  always @(posedge clk or posedge reset)
    begin : stimuli_tCarr_2
      if (reset) begin
        holdData_tCarr_re <= 12'bx;
      end
      else begin
        holdData_tCarr_re <= rawData_tCarr_re;
      end
    end

  always @(rawData_tCarr_re or rdEnb)
    begin : stimuli_tCarr_3
      if (rdEnb == 1'b0) begin
        tCarr_re_offset <= holdData_tCarr_re;
      end
      else begin
        tCarr_re_offset <= rawData_tCarr_re;
      end
    end

  assign #2 tCarr_re = tCarr_re_offset;

  // holdData reg for tMod
  always @(posedge clk or posedge reset)
    begin : stimuli_tMod
      if (reset) begin
        holdData_tMod_im <= 12'bx;
      end
      else begin
        holdData_tMod_im <= rawData_tMod_im;
      end
    end

  always @(rawData_tMod_im or rdEnb)
    begin : stimuli_tMod_1
      if (rdEnb == 1'b0) begin
        tMod_im_offset <= holdData_tMod_im;
      end
      else begin
        tMod_im_offset <= rawData_tMod_im;
      end
    end

  assign #2 tMod_im_1 = tMod_im_offset;

  assign tMod_active = tMod_addr != 13'b1001111111111;



  assign tMod_enb = tMod_active & (rdEnb & tb_enb);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5119
  always_ff @(posedge clk or posedge reset)
    begin : tMod_process
      if (reset == 1'b1) begin
        tMod_addr <= 13'b0000000000000;
      end
      else begin
        if (tMod_enb) begin
          if (tMod_addr >= 13'b1001111111111) begin
            tMod_addr <= 13'b0000000000000;
          end
          else begin
            tMod_addr <= tMod_addr + 13'b0000000000001;
          end
        end
      end
    end



  assign #1 tMod_addr_delay_1 = tMod_addr;

  // Data source for tMod_re
  initial
    begin : tMod_re_fileread
      fp_tMod_re = $fopen("tMod_re.dat", "r");
      status_tMod_re = $rewind(fp_tMod_re);
    end

  always @(tMod_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_tMod_re <= 12'bx;
      end
      else if (rdEnb == 1) begin
        status_tMod_re = $fscanf(fp_tMod_re, "%h", rawData_tMod_re);
      end
    end

  // holdData reg for tMod
  always @(posedge clk or posedge reset)
    begin : stimuli_tMod_2
      if (reset) begin
        holdData_tMod_re <= 12'bx;
      end
      else begin
        holdData_tMod_re <= rawData_tMod_re;
      end
    end

  always @(rawData_tMod_re or rdEnb)
    begin : stimuli_tMod_3
      if (rdEnb == 1'b0) begin
        tMod_re_offset <= holdData_tMod_re;
      end
      else begin
        tMod_re_offset <= rawData_tMod_re;
      end
    end

  assign #2 tMod_re = tMod_re_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  assign rdEnb = (snkDone == 1'b0 ? tb_enb :
              1'b0);



  assign #2 enb = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  envelopeModulation_fixpt u_envelopeModulation_fixpt (.clk(clk),
                                                       .reset(reset),
                                                       .clk_enable(enb),
                                                       .tMod_re(tMod_re),  /* ufix12 */
                                                       .tMod_im(tMod_im_1),  /* ufix12 */
                                                       .tCarr_re(tCarr_re),  /* ufix12 */
                                                       .tCarr_im(tCarr_im_1),  /* ufix12 */
                                                       .validIn(validIn),
                                                       .ce_out(ce_out),
                                                       .yOut_re(yOut_re),  /* sfix26 */
                                                       .yOut_im(yOut_im),  /* sfix26 */
                                                       .validOut(validOut)
                                                       );

  assign yOut_re_enb = ce_out & yOut_re_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5119
  always_ff @(posedge clk or posedge reset)
    begin : yOut_process
      if (reset == 1'b1) begin
        yOut_re_addr <= 13'b0000000000000;
      end
      else begin
        if (yOut_re_enb) begin
          if (yOut_re_addr >= 13'b1001111111111) begin
            yOut_re_addr <= 13'b0000000000000;
          end
          else begin
            yOut_re_addr <= yOut_re_addr + 13'b0000000000001;
          end
        end
      end
    end



  assign yOut_re_lastAddr = yOut_re_addr >= 13'b1001111111111;



  assign yOut_re_done = yOut_re_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (yOut_re_done_enb) begin
          check1_done <= yOut_re_done;
        end
      end
    end

  assign snkDone = check1_done & check2_done;



  assign #1 yOut_re_addr_delay_1 = yOut_re_addr;

  // Data source for yOut_re_expected
  initial
    begin : yOut_re_expected_fileread
      fp_yOut_re_expected = $fopen("yOut_re_expected.dat", "r");
      status_yOut_re_expected = $rewind(fp_yOut_re_expected);
    end

  always @(yOut_re_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        yOut_re_expected <= 26'bx;
      end
      else if (ce_out == 1) begin
        status_yOut_re_expected = $fscanf(fp_yOut_re_expected, "%h", yOut_re_expected);
      end
    end

  assign yOut_re_ref = yOut_re_expected;

  always @(posedge clk or posedge reset)
    begin : yOut_re_checker
      if (reset == 1'b1) begin
        yOut_re_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && yOut_re !== yOut_re_ref) begin
          yOut_re_testFailure <= 1'b1;
          $display("ERROR in yOut_re at time %t : Expected '%h' Actual '%h'", $time, yOut_re_ref, yOut_re);
        end
      end
    end

  // Data source for yOut_im_expected
  initial
    begin : yOut_im_expected_fileread
      fp_yOut_im_expected = $fopen("yOut_im_expected.dat", "r");
      status_yOut_im_expected = $rewind(fp_yOut_im_expected);
    end

  always @(yOut_re_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        yOut_im_expected <= 26'bx;
      end
      else if (ce_out == 1) begin
        status_yOut_im_expected = $fscanf(fp_yOut_im_expected, "%h", yOut_im_expected);
      end
    end

  assign yOut_im_ref = yOut_im_expected;

  always @(posedge clk or posedge reset)
    begin : yOut_im_checker
      if (reset == 1'b1) begin
        yOut_im_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && yOut_im !== yOut_im_ref) begin
          yOut_im_testFailure <= 1'b1;
          $display("ERROR in yOut_im at time %t : Expected '%h' Actual '%h'", $time, yOut_im_ref, yOut_im);
        end
      end
    end

  assign #1 validOut_addr_delay_1 = yOut_re_addr;

  // Data source for validOut_expected
  initial
    begin : validOut_expected_fileread
      fp_validOut_expected = $fopen("validOut_expected.dat", "r");
      status_validOut_expected = $rewind(fp_validOut_expected);
    end

  always @(validOut_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        validOut_expected <= 1'bx;
      end
      else if (ce_out == 1) begin
        status_validOut_expected = $fscanf(fp_validOut_expected, "%h", validOut_expected);
      end
    end

  assign validOut_ref = validOut_expected;

  always @(posedge clk or posedge reset)
    begin : validOut_checker
      if (reset == 1'b1) begin
        validOut_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && validOut !== validOut_ref) begin
          validOut_testFailure <= 1'b1;
          $display("ERROR in validOut at time %t : Expected '%h' Actual '%h'", $time, validOut_ref, validOut);
        end
      end
    end

  assign testFailure = validOut_testFailure | (yOut_re_testFailure | yOut_im_testFailure);



int yOutVal; 
   // Data source for yOut_re_expected
  initial
    begin 
      yOutVal = $fopen("yOutVal.dat", "w");
    end

  always @(posedge clk)
    begin 
      if(validOut)
        $fwrite(yOutVal, "%d\n", yOut_re);
    end 




  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // envelopeModulation_fixpt_tb

