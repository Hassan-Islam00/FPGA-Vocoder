// -------------------------------------------------------------
// 
// File Name: C:\Users\Hassa\Documents\GitHub\vocoder\MATLAB\MATLAB_CodeGen\codegen\envelopeModulation\hdlsrc\TWDLROM_5_1.sv
// Created: 2024-03-28 20:55:43
// 
// Generated by MATLAB 23.2, MATLAB Coder 23.2 and HDL Coder 23.2
// 
// 
// -------------------------------------------------------------


import envelopeModulation_fixpt_pkg::* ;

// -------------------------------------------------------------
// 
// Module: TWDLROM_5_1
// Source Path: envelopeModulation_fixpt/dsphdl.IFFT/TWDLROM_5_1
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module TWDLROM_5_1
          #(  parameter vector_of_signed_logic_26 table_data [0:127] = '{16777216, 16776900, 16775953, 16774374, 16772163, 16769321, 16765847, 16761743, 16757007, 16751640,
             16745643, 16739015, 16731757, 16723869, 16715352, 16706205, 16696429, 16686025, 16674992, 16663331, 16651044,
             16638129, 16624588, 16610420, 16595628, 16580211, 16564169, 16547504, 16530216, 16512305, 16493773, 16474620,
             16454846, 16434454, 16413442, 16391812, 16369565, 16346702, 16323224, 16299131, 16274424, 16249104, 16223173,
             16196631, 16169479, 16141719, 16113350, 16084375, 16054795, 16024610, 15993821, 15962431, 15930439, 15897848,
             15864658, 15830871, 15796488, 15761510, 15725939, 15689776, 15653022, 15615678, 15577747, 15539229, 15500126,
             15460440, 15420172, 15379323, 15337895, 15295889, 15253308, 15210152, 15166424, 15122124, 15077256, 15031819,
             14985817, 14939251, 14892122, 14844432, 14796184, 14747378, 14698017, 14648103, 14597637, 14546622, 14495059,
             14442951, 14390298, 14337104, 14283370, 14229098, 14174291, 14118950, 14063077, 14006675, 13949745, 13892291,
             13834313, 13775814, 13716797, 13657263, 13597215, 13536656, 13475586, 13414009, 13351928, 13289343, 13226258,
             13162675, 13098597, 13034026, 12968963, 12903413, 12837376, 12770857, 12703856, 12636378, 12568423, 12499995,
             12431097, 12361731, 12291899, 12221604, 12150850, 12079638, 12007971, 11935852}  /* sfix26 [128] */,
              parameter vector_of_signed_logic_26 table_data_2 [0:127] = '{0, -102943, -205882, -308814, -411733, -514638, -617523, -720384, -823219, -926023, -1028791, -1131521,
             -1234209, -1336849, -1439440, -1541976, -1644455, -1746871, -1849222, -1951503, -2053710, -2155841, -2257890,
             -2359854, -2461729, -2563511, -2665197, -2766783, -2868265, -2969638, -3070900, -3172046, -3273072, -3373976,
             -3474752, -3575398, -3675909, -3776281, -3876512, -3976596, -4076531, -4176312, -4275936, -4375399, -4474698,
             -4573827, -4672785, -4771567, -4870169, -4968587, -5066819, -5164860, -5262706, -5360355, -5457801, -5555042,
             -5652074, -5748893, -5845495, -5941878, -6038037, -6133968, -6229669, -6325135, -6420363, -6515349, -6610090,
             -6704582, -6798821, -6892805, -6986529, -7079990, -7173184, -7266109, -7358759, -7451133, -7543226, -7635036,
             -7726557, -7817788, -7908725, -7999364, -8089701, -8179734, -8269459, -8358873, -8447972, -8536753, -8625213,
             -8713348, -8801154, -8888630, -8975771, -9062573, -9149035, -9235152, -9320922, -9406340, -9491405, -9576112,
             -9660458, -9744441, -9828057, -9911303, -9994176, -10076672, -10158790, -10240524, -10321873, -10402834,
             -10483403, -10563577, -10643353, -10722729, -10801701, -10880266, -10958422, -11036165, -11113493, -11190402,
             -11266890, -11342953, -11418590, -11493797, -11568571, -11642909, -11716809, -11790268}  /* sfix26 [128] */)
          (  input logic clk,
             input logic reset,
             input logic enb,
             input logic dout_4_1_vld,
             input logic softReset,
             output logic signed [25:0] twdl_5_1_re  /* sfix26_En24 */,
             output logic signed [25:0] twdl_5_1_im  /* sfix26_En24 */,
             output logic twdl_5_1_vld);


  logic [7:0] Radix22TwdlMapping_cnt;  /* ufix8 */
  logic [1:0] Radix22TwdlMapping_phase;  /* ufix2 */
  logic [2:0] Radix22TwdlMapping_octantReg1;  /* ufix3 */
  logic [9:0] Radix22TwdlMapping_twdlAddr_raw;  /* ufix10 */
  logic [6:0] Radix22TwdlMapping_twdlAddrMap;  /* ufix7 */
  logic Radix22TwdlMapping_twdl45Reg;
  logic Radix22TwdlMapping_dvldReg1;
  logic Radix22TwdlMapping_dvldReg2;
  logic [7:0] Radix22TwdlMapping_cnt_next;  /* ufix8 */
  logic [1:0] Radix22TwdlMapping_phase_next;  /* ufix2 */
  logic [2:0] Radix22TwdlMapping_octantReg1_next;  /* ufix3 */
  logic [9:0] Radix22TwdlMapping_twdlAddr_raw_next;  /* ufix10 */
  logic [6:0] Radix22TwdlMapping_twdlAddrMap_next;  /* ufix7 */
  logic Radix22TwdlMapping_twdl45Reg_next;
  logic Radix22TwdlMapping_dvldReg1_next;
  logic Radix22TwdlMapping_dvldReg2_next;
  logic [6:0] twdlAddr;  /* ufix7 */
  logic twdlAddrVld;
  logic [2:0] twdlOctant;  /* ufix3 */
  logic twdl45;
  logic signed [25:0] twiddleS_re;  /* sfix26_En24 */
  logic signed [25:0] twiddleReg_re;  /* sfix26_En24 */
  logic signed [25:0] twiddleS_im;  /* sfix26_En24 */
  logic signed [25:0] twiddleReg_im;  /* sfix26_En24 */
  logic [2:0] twdlOctantReg;  /* ufix3 */
  logic twdl45Reg;
  logic signed [25:0] twdl_5_1_re_1;  /* sfix26_En24 */
  logic signed [25:0] twdl_5_1_im_1;  /* sfix26_En24 */
  logic twdl_5_1_vld_1;
  logic [2:0] Radix22TwdlMapping_octant;  /* ufix3 */
  logic [9:0] Radix22TwdlMapping_cnt_cast;  /* ufix10 */
  logic signed [21:0] Radix22TwdlMapping_sub_cast;  /* sfix22_En7 */
  logic signed [21:0] Radix22TwdlMapping_sub_temp;  /* sfix22_En7 */
  logic signed [11:0] Radix22TwdlMapping_sub_temp_0;  /* sfix12 */
  logic signed [11:0] Radix22TwdlMapping_sub_temp_1;  /* sfix12 */
  logic signed [21:0] Radix22TwdlMapping_sub_cast_0;  /* sfix22_En7 */
  logic signed [21:0] Radix22TwdlMapping_sub_temp_2;  /* sfix22_En7 */
  logic signed [21:0] Radix22TwdlMapping_sub_cast_1;  /* sfix22_En7 */
  logic signed [21:0] Radix22TwdlMapping_sub_temp_3;  /* sfix22_En7 */
  logic [9:0] Radix22TwdlMapping_t_0;  /* ufix10 */
  logic signed [11:0] Radix22TwdlMapping_t_1;  /* sfix12 */
  logic signed [11:0] Radix22TwdlMapping_t_2;  /* sfix12 */
  logic signed [25:0] Radix22TwdlOctCorr_twdlIn_re;  /* sfix26_En24 */
  logic signed [25:0] Radix22TwdlOctCorr_twdlIn_im;  /* sfix26_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_0;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_1;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_2;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_3;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_4;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_5;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_6;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_7;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_8;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_9;  /* sfix27_En24 */
  logic signed [26:0] Radix22TwdlOctCorr_cast_10;  /* sfix27_En24 */


  // Radix22TwdlMapping
  always_ff @(posedge clk or posedge reset)
    begin : Radix22TwdlMapping_process
      if (reset == 1'b1) begin
        Radix22TwdlMapping_octantReg1 <= 3'b000;
        Radix22TwdlMapping_twdlAddr_raw <= 10'b0000000000;
        Radix22TwdlMapping_twdlAddrMap <= 7'b0000000;
        Radix22TwdlMapping_twdl45Reg <= 1'b0;
        Radix22TwdlMapping_dvldReg1 <= 1'b0;
        Radix22TwdlMapping_dvldReg2 <= 1'b0;
        Radix22TwdlMapping_cnt <= 8'b00000000;
        Radix22TwdlMapping_phase <= 2'b00;
      end
      else begin
        if (enb) begin
          Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
          Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
          Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
          Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
          Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
          Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
          Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
          Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
        end
      end
    end

  always @(Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_4_1_vld) begin
    Radix22TwdlMapping_sub_temp = 22'sb0000000000000000000000;
    Radix22TwdlMapping_sub_temp_0 = 12'sb000000000000;
    Radix22TwdlMapping_sub_temp_1 = 12'sb000000000000;
    Radix22TwdlMapping_sub_temp_2 = 22'sb0000000000000000000000;
    Radix22TwdlMapping_sub_temp_3 = 22'sb0000000000000000000000;
    Radix22TwdlMapping_sub_cast_1 = 22'sb0000000000000000000000;
    Radix22TwdlMapping_t_0 = 10'b0000000000;
    Radix22TwdlMapping_cnt_cast = 10'b0000000000;
    Radix22TwdlMapping_sub_cast_0 = 22'sb0000000000000000000000;
    Radix22TwdlMapping_t_2 = 12'sb000000000000;
    Radix22TwdlMapping_t_1 = 12'sb000000000000;
    Radix22TwdlMapping_sub_cast = 22'sb0000000000000000000000;
    Radix22TwdlMapping_cnt_next = Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next = Radix22TwdlMapping_phase;
    Radix22TwdlMapping_dvldReg2_next = Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next = dout_4_1_vld;
    case ( Radix22TwdlMapping_twdlAddr_raw)
      10'b0010000000 :
        begin
          Radix22TwdlMapping_octant = 3'b000;
          Radix22TwdlMapping_twdl45Reg_next = 1'b1;
        end
      10'b0100000000 :
        begin
          Radix22TwdlMapping_octant = 3'b001;
          Radix22TwdlMapping_twdl45Reg_next = 1'b0;
        end
      10'b0110000000 :
        begin
          Radix22TwdlMapping_octant = 3'b010;
          Radix22TwdlMapping_twdl45Reg_next = 1'b1;
        end
      10'b1000000000 :
        begin
          Radix22TwdlMapping_octant = 3'b011;
          Radix22TwdlMapping_twdl45Reg_next = 1'b0;
        end
      10'b1010000000 :
        begin
          Radix22TwdlMapping_octant = 3'b100;
          Radix22TwdlMapping_twdl45Reg_next = 1'b1;
        end
      default :
        begin
          Radix22TwdlMapping_octant = Radix22TwdlMapping_twdlAddr_raw[9:7];
          Radix22TwdlMapping_twdl45Reg_next = 1'b0;
        end
    endcase
    Radix22TwdlMapping_octantReg1_next = Radix22TwdlMapping_octant;
    case ( Radix22TwdlMapping_octant)
      3'b000 :
        begin
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_twdlAddr_raw[6:0];
        end
      3'b001 :
        begin
          Radix22TwdlMapping_t_1 = {2'b0, Radix22TwdlMapping_twdlAddr_raw};
          Radix22TwdlMapping_sub_temp_0 = 12'sb000100000000 - Radix22TwdlMapping_t_1;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp_0[6:0];
        end
      3'b010 :
        begin
          Radix22TwdlMapping_t_2 = {2'b0, Radix22TwdlMapping_twdlAddr_raw};
          Radix22TwdlMapping_sub_temp_1 = Radix22TwdlMapping_t_2 - 12'sb000100000000;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp_1[6:0];
        end
      3'b011 :
        begin
          Radix22TwdlMapping_sub_cast_0 = {5'b0, {Radix22TwdlMapping_twdlAddr_raw, 7'b0000000}};
          Radix22TwdlMapping_sub_temp_2 = 22'sb0000010000000000000000 - Radix22TwdlMapping_sub_cast_0;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp_2[13:7];
        end
      3'b100 :
        begin
          Radix22TwdlMapping_sub_cast_1 = {5'b0, {Radix22TwdlMapping_twdlAddr_raw, 7'b0000000}};
          Radix22TwdlMapping_sub_temp_3 = Radix22TwdlMapping_sub_cast_1 - 22'sb0000010000000000000000;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp_3[13:7];
        end
      default :
        begin
          Radix22TwdlMapping_sub_cast = {5'b0, {Radix22TwdlMapping_twdlAddr_raw, 7'b0000000}};
          Radix22TwdlMapping_sub_temp = 22'sb0000011000000000000000 - Radix22TwdlMapping_sub_cast;
          Radix22TwdlMapping_twdlAddrMap_next = Radix22TwdlMapping_sub_temp[13:7];
        end
    endcase
    if (Radix22TwdlMapping_phase == 2'b00) begin
      Radix22TwdlMapping_twdlAddr_raw_next = 10'b0000000000;
    end
    else if (Radix22TwdlMapping_phase == 2'b01) begin
      Radix22TwdlMapping_t_0 = {2'b0, Radix22TwdlMapping_cnt};
      Radix22TwdlMapping_twdlAddr_raw_next = Radix22TwdlMapping_t_0 <<< 8'd1;
    end
    else if (Radix22TwdlMapping_phase == 2'b10) begin
      Radix22TwdlMapping_twdlAddr_raw_next = {2'b0, Radix22TwdlMapping_cnt};
    end
    else begin
      Radix22TwdlMapping_cnt_cast = {2'b0, Radix22TwdlMapping_cnt};
      Radix22TwdlMapping_twdlAddr_raw_next = (Radix22TwdlMapping_cnt_cast <<< 8'd1) + Radix22TwdlMapping_cnt_cast;
    end
    if (dout_4_1_vld && (Radix22TwdlMapping_cnt > 8'b11111011)) begin
      Radix22TwdlMapping_phase_next = Radix22TwdlMapping_phase + 2'b01;
    end
    if (dout_4_1_vld) begin
      Radix22TwdlMapping_cnt_next = Radix22TwdlMapping_cnt + 8'b00000100;
    end
    twdlAddr = Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld = Radix22TwdlMapping_dvldReg2;
    twdlOctant = Radix22TwdlMapping_octantReg1;
    twdl45 = Radix22TwdlMapping_twdl45Reg;
  end



  // Twiddle ROM1
  assign twiddleS_re = table_data[twdlAddr];



  always_ff @(posedge clk or posedge reset)
    begin : TWIDDLEROM_RE_process
      if (reset == 1'b1) begin
        twiddleReg_re <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          twiddleReg_re <= twiddleS_re;
        end
      end
    end



  // Twiddle ROM2
  assign twiddleS_im = table_data_2[twdlAddr];



  always_ff @(posedge clk or posedge reset)
    begin : TWIDDLEROM_IM_process
      if (reset == 1'b1) begin
        twiddleReg_im <= 26'sb00000000000000000000000000;
      end
      else begin
        if (enb) begin
          twiddleReg_im <= twiddleS_im;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        twdlOctantReg <= 3'b000;
      end
      else begin
        if (enb) begin
          twdlOctantReg <= twdlOctant;
        end
      end
    end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        twdl45Reg <= 1'b0;
      end
      else begin
        if (enb) begin
          twdl45Reg <= twdl45;
        end
      end
    end



  // Radix22TwdlOctCorr
  always @(twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re) begin
    Radix22TwdlOctCorr_cast_0 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_2 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_4 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_6 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_8 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_10 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_3 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_9 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_1 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_7 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_cast_5 = 27'sb000000000000000000000000000;
    Radix22TwdlOctCorr_twdlIn_re = twiddleReg_re;
    Radix22TwdlOctCorr_twdlIn_im = twiddleReg_im;
    if (twdl45Reg) begin
      case ( twdlOctantReg)
        3'b000 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 26'sb00101101010000010011110011;
            Radix22TwdlOctCorr_twdlIn_im = 26'sb11010010101111101100001101;
          end
        3'b010 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 26'sb11010010101111101100001101;
            Radix22TwdlOctCorr_twdlIn_im = 26'sb11010010101111101100001101;
          end
        3'b100 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 26'sb11010010101111101100001101;
            Radix22TwdlOctCorr_twdlIn_im = 26'sb00101101010000010011110011;
          end
        default :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 26'sb00101101010000010011110011;
            Radix22TwdlOctCorr_twdlIn_im = 26'sb11010010101111101100001101;
          end
      endcase
    end
    else begin
      case ( twdlOctantReg)
        3'b000 :
          begin
          end
        3'b001 :
          begin
            Radix22TwdlOctCorr_cast = {twiddleReg_im[25], twiddleReg_im};
            Radix22TwdlOctCorr_cast_0 =  - (Radix22TwdlOctCorr_cast);
            Radix22TwdlOctCorr_twdlIn_re = Radix22TwdlOctCorr_cast_0[25:0];
            Radix22TwdlOctCorr_cast_5 = {twiddleReg_re[25], twiddleReg_re};
            Radix22TwdlOctCorr_cast_6 =  - (Radix22TwdlOctCorr_cast_5);
            Radix22TwdlOctCorr_twdlIn_im = Radix22TwdlOctCorr_cast_6[25:0];
          end
        3'b010 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = twiddleReg_im;
            Radix22TwdlOctCorr_cast_7 = {twiddleReg_re[25], twiddleReg_re};
            Radix22TwdlOctCorr_cast_8 =  - (Radix22TwdlOctCorr_cast_7);
            Radix22TwdlOctCorr_twdlIn_im = Radix22TwdlOctCorr_cast_8[25:0];
          end
        3'b011 :
          begin
            Radix22TwdlOctCorr_cast_1 = {twiddleReg_re[25], twiddleReg_re};
            Radix22TwdlOctCorr_cast_2 =  - (Radix22TwdlOctCorr_cast_1);
            Radix22TwdlOctCorr_twdlIn_re = Radix22TwdlOctCorr_cast_2[25:0];
            Radix22TwdlOctCorr_twdlIn_im = twiddleReg_im;
          end
        3'b100 :
          begin
            Radix22TwdlOctCorr_cast_3 = {twiddleReg_re[25], twiddleReg_re};
            Radix22TwdlOctCorr_cast_4 =  - (Radix22TwdlOctCorr_cast_3);
            Radix22TwdlOctCorr_twdlIn_re = Radix22TwdlOctCorr_cast_4[25:0];
            Radix22TwdlOctCorr_cast_9 = {twiddleReg_im[25], twiddleReg_im};
            Radix22TwdlOctCorr_cast_10 =  - (Radix22TwdlOctCorr_cast_9);
            Radix22TwdlOctCorr_twdlIn_im = Radix22TwdlOctCorr_cast_10[25:0];
          end
        default :
          begin
            Radix22TwdlOctCorr_twdlIn_re = twiddleReg_im;
            Radix22TwdlOctCorr_twdlIn_im = twiddleReg_re;
          end
      endcase
    end
    twdl_5_1_re_1 = Radix22TwdlOctCorr_twdlIn_re;
    twdl_5_1_im_1 = Radix22TwdlOctCorr_twdlIn_im;
  end



  always_ff @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        twdl_5_1_vld_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          twdl_5_1_vld_1 <= twdlAddrVld;
        end
      end
    end



  assign twdl_5_1_re = twdl_5_1_re_1;

  assign twdl_5_1_im = twdl_5_1_im_1;

  assign twdl_5_1_vld = twdl_5_1_vld_1;

endmodule  // TWDLROM_5_1

